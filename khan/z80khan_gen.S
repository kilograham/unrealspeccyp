// ================================
// == AUTOGENERATED: DO NOT EDIT ==
// ================================

// ALWAYS DIFF THIS CODE AFTER GENERATION - SENSITVE TO COMPILER VERSION CHANGES!

// === BEGIN top level opcodes
op_table:
.short op00 + 1 - op_table
.short op01 + 1 - op_table
.short op02 + 1 - op_table
.short op03 + 1 - op_table
.short op04 + 1 - op_table
.short op05 + 1 - op_table
.short op06 + 1 - op_table
.short op07 + 1 - op_table
.short op08 + 1 - op_table
.short op09 + 1 - op_table
.short op0a + 1 - op_table
.short op0b + 1 - op_table
.short op0c + 1 - op_table
.short op0d + 1 - op_table
.short op0e + 1 - op_table
.short op0f + 1 - op_table
.short op10 + 1 - op_table
.short op11 + 1 - op_table
.short op12 + 1 - op_table
.short op13 + 1 - op_table
.short op14 + 1 - op_table
.short op15 + 1 - op_table
.short op16 + 1 - op_table
.short op17 + 1 - op_table
.short op18 + 1 - op_table
.short op19 + 1 - op_table
.short op1a + 1 - op_table
.short op1b + 1 - op_table
.short op1c + 1 - op_table
.short op1d + 1 - op_table
.short op1e + 1 - op_table
.short op1f + 1 - op_table
.short op20 + 1 - op_table
.short op21 + 1 - op_table
.short op22 + 1 - op_table
.short op23 + 1 - op_table
.short op24 + 1 - op_table
.short op25 + 1 - op_table
.short op26 + 1 - op_table
.short op27 + 1 - op_table
.short op28 + 1 - op_table
.short op29 + 1 - op_table
.short op2a + 1 - op_table
.short op2b + 1 - op_table
.short op2c + 1 - op_table
.short op2d + 1 - op_table
.short op2e + 1 - op_table
.short op2f + 1 - op_table
.short op30 + 1 - op_table
.short op31 + 1 - op_table
.short op32 + 1 - op_table
.short op33 + 1 - op_table
.short op34 + 1 - op_table
.short op35 + 1 - op_table
.short op36 + 1 - op_table
.short op37 + 1 - op_table
.short op38 + 1 - op_table
.short op39 + 1 - op_table
.short op3a + 1 - op_table
.short op3b + 1 - op_table
.short op3c + 1 - op_table
.short op3d + 1 - op_table
.short op3e + 1 - op_table
.short op3f + 1 - op_table
.short op40 + 1 - op_table
.short op41 + 1 - op_table
.short op42 + 1 - op_table
.short op43 + 1 - op_table
.short op44 + 1 - op_table
.short op45 + 1 - op_table
.short op46 + 1 - op_table
.short op47 + 1 - op_table
.short op48 + 1 - op_table
.short op49 + 1 - op_table
.short op4a + 1 - op_table
.short op4b + 1 - op_table
.short op4c + 1 - op_table
.short op4d + 1 - op_table
.short op4e + 1 - op_table
.short op4f + 1 - op_table
.short op50 + 1 - op_table
.short op51 + 1 - op_table
.short op52 + 1 - op_table
.short op53 + 1 - op_table
.short op54 + 1 - op_table
.short op55 + 1 - op_table
.short op56 + 1 - op_table
.short op57 + 1 - op_table
.short op58 + 1 - op_table
.short op59 + 1 - op_table
.short op5a + 1 - op_table
.short op5b + 1 - op_table
.short op5c + 1 - op_table
.short op5d + 1 - op_table
.short op5e + 1 - op_table
.short op5f + 1 - op_table
.short op60 + 1 - op_table
.short op61 + 1 - op_table
.short op62 + 1 - op_table
.short op63 + 1 - op_table
.short op64 + 1 - op_table
.short op65 + 1 - op_table
.short op66 + 1 - op_table
.short op67 + 1 - op_table
.short op68 + 1 - op_table
.short op69 + 1 - op_table
.short op6a + 1 - op_table
.short op6b + 1 - op_table
.short op6c + 1 - op_table
.short op6d + 1 - op_table
.short op6e + 1 - op_table
.short op6f + 1 - op_table
.short op70 + 1 - op_table
.short op71 + 1 - op_table
.short op72 + 1 - op_table
.short op73 + 1 - op_table
.short op74 + 1 - op_table
.short op75 + 1 - op_table
.short op76 + 1 - op_table
.short op77 + 1 - op_table
.short op78 + 1 - op_table
.short op79 + 1 - op_table
.short op7a + 1 - op_table
.short op7b + 1 - op_table
.short op7c + 1 - op_table
.short op7d + 1 - op_table
.short op7e + 1 - op_table
.short op7f + 1 - op_table
.short op80 + 1 - op_table
.short op81 + 1 - op_table
.short op82 + 1 - op_table
.short op83 + 1 - op_table
.short op84 + 1 - op_table
.short op85 + 1 - op_table
.short op86 + 1 - op_table
.short op87 + 1 - op_table
.short op88 + 1 - op_table
.short op89 + 1 - op_table
.short op8a + 1 - op_table
.short op8b + 1 - op_table
.short op8c + 1 - op_table
.short op8d + 1 - op_table
.short op8e + 1 - op_table
.short op8f + 1 - op_table
.short op90 + 1 - op_table
.short op91 + 1 - op_table
.short op92 + 1 - op_table
.short op93 + 1 - op_table
.short op94 + 1 - op_table
.short op95 + 1 - op_table
.short op96 + 1 - op_table
.short op97 + 1 - op_table
.short op98 + 1 - op_table
.short op99 + 1 - op_table
.short op9a + 1 - op_table
.short op9b + 1 - op_table
.short op9c + 1 - op_table
.short op9d + 1 - op_table
.short op9e + 1 - op_table
.short op9f + 1 - op_table
.short opa0 + 1 - op_table
.short opa1 + 1 - op_table
.short opa2 + 1 - op_table
.short opa3 + 1 - op_table
.short opa4 + 1 - op_table
.short opa5 + 1 - op_table
.short opa6 + 1 - op_table
.short opa7 + 1 - op_table
.short opa8 + 1 - op_table
.short opa9 + 1 - op_table
.short opaa + 1 - op_table
.short opab + 1 - op_table
.short opac + 1 - op_table
.short opad + 1 - op_table
.short opae + 1 - op_table
.short opaf + 1 - op_table
.short opb0 + 1 - op_table
.short opb1 + 1 - op_table
.short opb2 + 1 - op_table
.short opb3 + 1 - op_table
.short opb4 + 1 - op_table
.short opb5 + 1 - op_table
.short opb6 + 1 - op_table
.short opb7 + 1 - op_table
.short opb8 + 1 - op_table
.short opb9 + 1 - op_table
.short opba + 1 - op_table
.short opbb + 1 - op_table
.short opbc + 1 - op_table
.short opbd + 1 - op_table
.short opbe + 1 - op_table
.short opbf + 1 - op_table
.short opc0 + 1 - op_table
.short opc1 + 1 - op_table
.short opc2 + 1 - op_table
.short opc3 + 1 - op_table
.short opc4 + 1 - op_table
.short opc5 + 1 - op_table
.short opc6 + 1 - op_table
.short opc7 + 1 - op_table
.short opc8 + 1 - op_table
.short opc9 + 1 - op_table
.short opca + 1 - op_table
.short opcb + 1 - op_table
.short opcc + 1 - op_table
.short opcd + 1 - op_table
.short opce + 1 - op_table
.short opcf + 1 - op_table
.short opd0 + 1 - op_table
.short opd1 + 1 - op_table
.short opd2 + 1 - op_table
.short opd3 + 1 - op_table
.short opd4 + 1 - op_table
.short opd5 + 1 - op_table
.short opd6 + 1 - op_table
.short opd7 + 1 - op_table
.short opd8 + 1 - op_table
.short opd9 + 1 - op_table
.short opda + 1 - op_table
.short opdb + 1 - op_table
.short opdc + 1 - op_table
.short opdd + 1 - op_table
.short opde + 1 - op_table
.short opdf + 1 - op_table
.short ope0 + 1 - op_table
.short ope1 + 1 - op_table
.short ope2 + 1 - op_table
.short ope3 + 1 - op_table
.short ope4 + 1 - op_table
.short ope5 + 1 - op_table
.short ope6 + 1 - op_table
.short ope7 + 1 - op_table
.short ope8 + 1 - op_table
.short ope9 + 1 - op_table
.short opea + 1 - op_table
.short opeb + 1 - op_table
.short opec + 1 - op_table
.short oped + 1 - op_table
.short opee + 1 - op_table
.short opef + 1 - op_table
.short opf0 + 1 - op_table
.short opf1 + 1 - op_table
.short opf2 + 1 - op_table
.short opf3 + 1 - op_table
.short opf4 + 1 - op_table
.short opf5 + 1 - op_table
.short opf6 + 1 - op_table
.short opf7 + 1 - op_table
.short opf8 + 1 - op_table
.short opf9 + 1 - op_table
.short opfa + 1 - op_table
.short opfb + 1 - op_table
.short opfc + 1 - op_table
.short opfd + 1 - op_table
.short opfe + 1 - op_table
.short opff + 1 - op_table
.thumb_func
z80a_interrupt:
	movs  r_temp, #56
	push {lr}
	ldr  r0, =z80a_resting_state
	ldr  r0, [r0, #0] // im
	cmp  r0, #2
	blt  1f
	ldr  r0, =z80a_resting_state
	ldrb r0, [r0, #13] // i
	lsls  r0, #8
	movs  r1, #0xff
	orrs  r0, r1
	bl   read16
	mov  r_temp, r0
	adds  r_t, #6
1:
	adds  r_t, #13
	mov  r0, r_pc
	bl   _push
	mov  r_pc, r_temp
	mov  r_memptr, r_temp
	movs  r0, #0
	ldr  r1, =z80a_resting_state
	strb r0, [r1, #11] // halted
	movs  r0, #0
	ldr  r1, =z80a_resting_state
	strb r0, [r1, #10] // iff2
	ldr  r1, =z80a_resting_state
	strb r0, [r1, #9] // iff1
	ldr  r0, =z80a_resting_state
	ldrb r0, [r0, #12] // r_low
	adds  r0, #1
	uxth r0, r0
	ldr  r1, =z80a_resting_state
	strb r0, [r1, #12] // r_low
	pop  {pc}

op00:
	bx   lr

op01:
	mov  r0, r_pc
	push {lr}
	bl   read16inc
	mov  r_pc, r1
	mov  r_bc, r0
	adds  r_t, #6
	pop  {pc}

op02:
	lsrs  r0, r_af, #8
	lsls  r0, #8
	mov  r1, r_memptr
	uxtb r1, r1
	orrs  r0, r1
	mov  r_memptr, r0
	mov  r0, r_bc
	adds  r0, #1
	uxtb r0, r0
	mov  r1, r_memptr
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r0
	mov  r_memptr, r1
	adds  r_t, #3
	mov  r0, r_af
	lsrs  r0, #8
	mov  r1, r_bc
	ldr  r2, =write8
	bx   r2

op03:
	mov  r0, r_bc
	adds  r0, #1
	uxth r0, r0
	mov  r_bc, r0
	adds  r_t, #2
	bx   lr

op04:
	mov  r0, r_bc
	lsrs  r0, #8
	push {lr}
	bl   inc8
	lsls  r0, #8
	mov  r1, r_bc
	uxtb r1, r1
	orrs  r0, r1
	mov  r_bc, r0
	pop  {pc}

op05:
	mov  r0, r_bc
	lsrs  r0, #8
	push {lr}
	bl   dec8
	lsls  r0, #8
	mov  r1, r_bc
	uxtb r1, r1
	orrs  r0, r1
	mov  r_bc, r0
	pop  {pc}

op06:
	mov  r0, r_pc
	push {lr}
	bl   read8inc
	mov  r_pc, r1
	lsls r0, #8
	mov  r1, r_bc
	uxtb r1, r1
	orrs  r0, r1
	mov  r_bc, r0
	adds  r_t, #3
	pop  {pc}

op07:
	movs  r0, #(SF|ZF|PV)
	ands  r0, r_af		// r0 = f & (SF|ZF|PV)
	movs  r1, #0
	lsrs  r_af, #8
	lsls  r_af, #25
	bcc  1f
	movs  r1, #CF
	orrs  r0, r1		// r0 = (f & (SF|ZF|PV)) | (a7 ? CF: 0)
1:
	lsrs  r_af, #24
	orrs  r_af, r1
	movs  r1,  #(F3|F5)		// r_af = (a << 1) | (a7 ? 1 : 0)
	ands  r1, r_af
	lsls  r_af, #8		// r_af = a' : 0
	orrs  r_af, r0		// r_af = a' | f'
	orrs  r_af, r1		// r_af |= 35 from a'
	bx   lr

op08:
	mov  r_temp, r_af
	ldr  r0, =z80a_resting_state
	ldr  r0, [r0, #60] // alt.af
	mov  r_af, r0
	mov  r0, r_temp
	ldr  r1, =z80a_resting_state
	str  r0, [r1, #60] // alt.af
	bx   lr

op09:
	mov  r0, r_hl
	adds  r0, #1
	uxth r0, r0
	mov  r_memptr, r0
	mov  r0, r_hl
	mov  r1, r_bc
	push {lr}
	bl   add16
	mov  r_hl, r0
	adds  r_t, #7
	pop  {pc}

op0a:
	mov  r0, r_bc
	adds  r0, #1
	uxth r0, r0
	mov  r_memptr, r0
	mov  r0, r_bc
	read8_internal r0
	lsls r0, #8
	uxtb r1, r_af
	orrs  r0, r1
	mov  r_af, r0
	adds  r_t, #3
	bx   lr

op0b:
	mov  r0, r_bc
	subs  r0, #1
	uxth r0, r0
	mov  r_bc, r0
	adds  r_t, #2
	bx   lr

op0c:
	mov  r0, r_bc
	uxtb r0, r0
	push {lr}
	bl   inc8
	mov  r1, r_bc
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r0
	mov  r_bc, r1
	pop  {pc}

op0d:
	mov  r0, r_bc
	uxtb r0, r0
	push {lr}
	bl   dec8
	mov  r1, r_bc
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r0
	mov  r_bc, r1
	pop  {pc}

op0e:
	mov  r0, r_pc
	push {lr}
	bl   read8inc
	mov  r_pc, r1
	mov  r1, r_bc
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r0
	mov  r_bc, r1
	adds  r_t, #3
	pop  {pc}

op0f:
	movs  r0, #(SF|ZF|PV)
	ands  r0, r_af		// r0 = f & (SF|ZF|PV)
	lsrs  r_af, r_af, #9
	bcc  1f
	adds  r0, #CF		// r0 = (f & (SF|ZF|PV)) | (a0 ? CF: 0)
	adds  r_af, #128		// r_af = (a0 ? 0x80 : 0) | (a >> 1)
1:
	movs  r1, #(F3|F5)
	ands  r1, r_af
	lsls  r_af, #8		// r_af = a' : 0
	orrs  r_af, r0		// r_af = a' | f'
	orrs  r_af, r1		// r_af |= 35 from a'
	bx   lr

op10:
	movs  r1, #1
	lsls  r1, #8
	mov  r0, r_bc
	subs  r0, r1
	uxth r0, r0
	mov  r_bc, r0
	mov  r0, r_bc
	lsrs  r0, #8
	cmp  r0, #0
	beq  1f
	mov  r0, r_pc
	read8_internal r0
	sxtb r0, r0
	adds  r0, #1
	add  r_pc, r0
	uxth r_pc, r_pc
	mov  r_memptr, r_pc
	adds  r_t, #9
	bx   lr

1:
	adds  r_pc, #1
	uxth r_pc, r_pc
	adds  r_t, #4
	bx   lr

op11:
	mov  r0, r_pc
	push {lr}
	bl   read16inc
	mov  r_pc, r1
	mov  r_de, r0
	adds  r_t, #6
	pop  {pc}

op12:
	lsrs  r0, r_af, #8
	lsls  r0, #8
	mov  r1, r_memptr
	uxtb r1, r1
	orrs  r0, r1
	mov  r_memptr, r0
	mov  r0, r_de
	adds  r0, #1
	uxtb r0, r0
	mov  r1, r_memptr
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r0
	mov  r_memptr, r1
	adds  r_t, #3
	mov  r0, r_af
	lsrs  r0, #8
	mov  r1, r_de
	ldr  r2, =write8
	bx   r2

op13:
	mov  r0, r_de
	adds  r0, #1
	uxth r0, r0
	mov  r_de, r0
	adds  r_t, #2
	bx   lr

op14:
	mov  r0, r_de
	lsrs  r0, #8
	push {lr}
	bl   inc8
	lsls  r0, #8
	mov  r1, r_de
	uxtb r1, r1
	orrs  r0, r1
	mov  r_de, r0
	pop  {pc}

op15:
	mov  r0, r_de
	lsrs  r0, #8
	push {lr}
	bl   dec8
	lsls  r0, #8
	mov  r1, r_de
	uxtb r1, r1
	orrs  r0, r1
	mov  r_de, r0
	pop  {pc}

op16:
	mov  r0, r_pc
	push {lr}
	bl   read8inc
	mov  r_pc, r1
	lsls r0, #8
	mov  r1, r_de
	uxtb r1, r1
	orrs  r0, r1
	mov  r_de, r0
	adds  r_t, #3
	pop  {pc}

op17:
	movs  r0, #(SF|ZF|PV)
	ands  r0, r_af		// r0 = f & (SF|ZF|PV)
	movs  r1, #CF
	ands  r1, r_af
	lsrs  r_af, #8
	lsls  r_af, #25
	bcc  1f
	adds  r0, #CF		// r0 = (f & (SF|ZF|PV)) | (a7 ? CF: 0)
1:
	lsrs  r_af, #24
	orrs  r_af, r1
	movs  r1,  #(F3|F5)		// r_af = (a << 1) | (c ? 1 : 0)
	ands  r1, r_af
	lsls  r_af, #8		// r_af = a' : 0
	orrs  r_af, r0		// r_af = a' | f'
	orrs  r_af, r1		// r_af |= 35 from a'
	bx   lr

op18:
	mov  r0, r_pc
	read8_internal r0
	sxtb r0, r0
	adds  r0, #1
	add  r_pc, r0
	uxth r_pc, r_pc
	mov  r_memptr, r_pc
	adds  r_t, #8
	bx   lr

op19:
	mov  r0, r_hl
	adds  r0, #1
	uxth r0, r0
	mov  r_memptr, r0
	mov  r0, r_hl
	mov  r1, r_de
	push {lr}
	bl   add16
	mov  r_hl, r0
	adds  r_t, #7
	pop  {pc}

op1a:
	mov  r0, r_de
	adds  r0, #1
	uxth r0, r0
	mov  r_memptr, r0
	mov  r0, r_de
	read8_internal r0
	lsls r0, #8
	uxtb r1, r_af
	orrs  r0, r1
	mov  r_af, r0
	adds  r_t, #3
	bx   lr

op1b:
	mov  r0, r_de
	subs  r0, #1
	uxth r0, r0
	mov  r_de, r0
	adds  r_t, #2
	bx   lr

op1c:
	mov  r0, r_de
	uxtb r0, r0
	push {lr}
	bl   inc8
	mov  r1, r_de
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r0
	mov  r_de, r1
	pop  {pc}

op1d:
	mov  r0, r_de
	uxtb r0, r0
	push {lr}
	bl   dec8
	mov  r1, r_de
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r0
	mov  r_de, r1
	pop  {pc}

op1e:
	mov  r0, r_pc
	push {lr}
	bl   read8inc
	mov  r_pc, r1
	mov  r1, r_de
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r0
	mov  r_de, r1
	adds  r_t, #3
	pop  {pc}

op1f:
	movs  r0, #(SF|ZF|PV)
	ands  r0, r_af		// r0 = f & (SF|ZF|PV)
	lsls  r2, r_af, #15		// r2 = (garbage : oldCF) << 15
	lsrs  r1, r_af, #9
	bcc  1f
	adds  r0, #CF		// r0 = (f & (SF|ZF|PV)) | (a0 ? CF: 0)
1:
	lsls  r_af, r1, #8
	orrs  r_af, r2
	orrs  r_af, r0
	movs  r0, #(F3|F5)
	uxth r_af, r_af
	ands  r0, r1
	orrs  r_af, r0
	bx   lr

op20:
	lsrs  r0, r_af, #7
	bcs  3f
	mov  r0, r_pc
	read8_internal r0
	sxtb r0, r0
	adds  r0, #1
	add  r_pc, r0
	uxth r_pc, r_pc
	mov  r_memptr, r_pc
	adds  r_t, #8
	bx   lr

3:
	adds  r_pc, #1
	uxth r_pc, r_pc
	adds  r_t, #3
	bx   lr

.ltorg
op21:
	mov  r0, r_pc
	push {lr}
	bl   read16inc
	mov  r_pc, r1
	mov  r_hl, r0
	adds  r_t, #6
	pop  {pc}

op22:
	mov  r0, r_pc
	push {lr}
	bl   read16inc
	mov  r_pc, r1
	mov  r_temp, r0
	adds  r0, r_temp, #1
	uxth r0, r0
	mov  r_memptr, r0
	mov  r0, r_hl
	mov  r1, r_temp
	bl   write16
	adds  r_t, #12
	pop  {pc}

op23:
	mov  r0, r_hl
	adds  r0, #1
	uxth r0, r0
	mov  r_hl, r0
	adds  r_t, #2
	bx   lr

op24:
	mov  r0, r_hl
	lsrs  r0, #8
	push {lr}
	bl   inc8
	lsls  r0, #8
	mov  r1, r_hl
	uxtb r1, r1
	orrs  r0, r1
	mov  r_hl, r0
	pop  {pc}

op25:
	mov  r0, r_hl
	lsrs  r0, #8
	push {lr}
	bl   dec8
	lsls  r0, #8
	mov  r1, r_hl
	uxtb r1, r1
	orrs  r0, r1
	mov  r_hl, r0
	pop  {pc}

op26:
	mov  r0, r_pc
	push {lr}
	bl   read8inc
	mov  r_pc, r1
	lsls r0, #8
	mov  r1, r_hl
	uxtb r1, r1
	orrs  r0, r1
	mov  r_hl, r0
	adds  r_t, #3
	pop  {pc}

op27:
	movs  r0, #0		// delta
	movs  r_temp, #(CF|NF)
	ands  r_temp, r_af		// new CHN flags - CH may be set later
	// lo nibble
	lsls  r1, r_af, #20
	lsrs  r1, #28
	lsrs  r2, r_af, #HF_INDEX+1
	bcs  1f
	cmp  r1, #10
	blt  3f
1:
	adds  r0, #0x06
	cmp  r_temp, #NF
	blt  1f
	subs  r1, r0
	b    2f
1:
	adds  r1, r0
2:
	lsls  r1, #28
	bcc  3f
	movs  r2, #HF
	orrs  r_temp, r2
3:
	// hi nibble
	movs  r2, #CF
	lsrs  r1, r_af, #8
	cmp  r1, #0x9a
	blt  1f
	orrs  r_temp, r2
	b    2f
1:
	ands  r2, r_af
	beq  3f
2:
	adds  r0, #0x60
3:
	lsrs  r2, r_af, #NF_INDEX+1
	bcc  1f
	subs  r1, r0
	b    2f
1:
	adds  r1, r0
2:
	uxtb r_af, r1
	ldr  r2, =_log_f
	ldrb r0, [r2, r_af]
	lsls  r_af, #8
	orrs  r_af, r0
	orrs  r_af, r_temp
	bx   lr

op28:
	lsrs  r0, r_af, #7
	bcc  2f
	mov  r0, r_pc
	read8_internal r0
	sxtb r0, r0
	adds  r0, #1
	add  r_pc, r0
	uxth r_pc, r_pc
	mov  r_memptr, r_pc
	adds  r_t, #8
	bx   lr

2:
	adds  r_pc, #1
	uxth r_pc, r_pc
	adds  r_t, #3
	bx   lr

op29:
	mov  r0, r_hl
	adds  r0, #1
	uxth r0, r0
	mov  r_memptr, r0
	mov  r0, r_hl
	mov  r1, r_hl
	push {lr}
	bl   add16
	mov  r_hl, r0
	adds  r_t, #7
	pop  {pc}

op2a:
	mov  r0, r_pc
	push {lr}
	bl   read16inc
	mov  r_pc, r1
	mov  r_temp, r0
	adds  r0, r_temp, #1
	uxth r0, r0
	mov  r_memptr, r0
	mov  r0, r_temp
	bl   read16
	mov  r_hl, r0
	adds  r_t, #12
	pop  {pc}

op2b:
	mov  r0, r_hl
	subs  r0, #1
	uxth r0, r0
	mov  r_hl, r0
	adds  r_t, #2
	bx   lr

op2c:
	mov  r0, r_hl
	uxtb r0, r0
	push {lr}
	bl   inc8
	mov  r1, r_hl
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r0
	mov  r_hl, r1
	pop  {pc}

op2d:
	mov  r0, r_hl
	uxtb r0, r0
	push {lr}
	bl   dec8
	mov  r1, r_hl
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r0
	mov  r_hl, r1
	pop  {pc}

op2e:
	mov  r0, r_pc
	push {lr}
	bl   read8inc
	mov  r_pc, r1
	mov  r1, r_hl
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r0
	mov  r_hl, r1
	adds  r_t, #3
	pop  {pc}

op2f:
	movs  r0, #255
	lsls  r0, #8
	eors  r_af, r0
	preserve_only_flags r0, PV|ZF|SF|CF
	adds  r_af, #NF|HF
	lsrs  r0, r_af, #8
	movs  r1, #(F3|F5)
	ands  r0, r1
	orrs  r_af, r0
	bx   lr

op30:
	lsrs  r0, r_af, #1
	bcs  3f
	mov  r0, r_pc
	read8_internal r0
	sxtb r0, r0
	adds  r0, #1
	add  r_pc, r0
	uxth r_pc, r_pc
	mov  r_memptr, r_pc
	adds  r_t, #8
	bx   lr

3:
	adds  r_pc, #1
	uxth r_pc, r_pc
	adds  r_t, #3
	bx   lr

op31:
	mov  r0, r_pc
	push {lr}
	bl   read16inc
	mov  r_pc, r1
	mov  r_sp, r0
	adds  r_t, #6
	pop  {pc}

op32:
	mov  r0, r_pc
	push {lr}
	bl   read16inc
	mov  r_pc, r1
	mov  r_temp, r0
	adds  r0, r_temp, #1
	uxtb r0, r0
	mov  r1, r_memptr
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r0
	mov  r_memptr, r1
	lsrs  r0, r_af, #8
	lsls  r0, #8
	mov  r1, r_memptr
	uxtb r1, r1
	orrs  r0, r1
	mov  r_memptr, r0
	adds  r_t, #9
	mov  r0, r_af
	lsrs  r0, #8
	mov  r1, r_temp
	bl   write8
	pop  {pc}

op33:
	mov  r0, r_sp
	adds  r0, #1
	uxth r0, r0
	mov  r_sp, r0
	adds  r_t, #2
	bx   lr

op34:
	mov  r0, r_hl
	read8_internal r0
	mov  r_temp, r0		// fine to overwrite hi in r_temp
	uxtb r0, r_temp
	push {lr}
	bl   inc8
	mov  r_temp, r0		// fine to overwrite hi in r_temp
	adds  r_t, #7
	mov  r0, r_temp		// high half of word is ignored later
	mov  r1, r_hl
	bl   write8
	pop  {pc}

op35:
	mov  r0, r_hl
	read8_internal r0
	mov  r_temp, r0		// fine to overwrite hi in r_temp
	uxtb r0, r_temp
	push {lr}
	bl   dec8
	mov  r_temp, r0		// fine to overwrite hi in r_temp
	adds  r_t, #7
	mov  r0, r_temp		// high half of word is ignored later
	mov  r1, r_hl
	bl   write8
	pop  {pc}

op36:
	adds  r_t, #6
	mov  r0, r_pc
	push {lr}
	bl   read8inc
	mov  r_pc, r1
	mov  r1, r_hl
	bl   write8
	pop  {pc}

op37:
	preserve_only_flags r0, PV|ZF|SF
	adds  r_af, #CF
	lsrs  r0, r_af, #8
	movs  r1, #(F3|F5)
	ands  r0, r1
	orrs  r_af, r0
	bx   lr

op38:
	lsrs  r0, r_af, #1
	bcc  2f
	mov  r0, r_pc
	read8_internal r0
	sxtb r0, r0
	adds  r0, #1
	add  r_pc, r0
	uxth r_pc, r_pc
	mov  r_memptr, r_pc
	adds  r_t, #8
	bx   lr

2:
	adds  r_pc, #1
	uxth r_pc, r_pc
	adds  r_t, #3
	bx   lr

op39:
	mov  r0, r_hl
	adds  r0, #1
	uxth r0, r0
	mov  r_memptr, r0
	mov  r0, r_hl
	mov  r1, r_sp
	push {lr}
	bl   add16
	mov  r_hl, r0
	adds  r_t, #7
	pop  {pc}

op3a:
	mov  r0, r_pc
	push {lr}
	bl   read16inc
	mov  r_pc, r1
	mov  r_temp, r0
	adds  r0, r_temp, #1
	uxth r0, r0
	mov  r_memptr, r0
	mov  r0, r_temp
	read8_internal r0
	lsls r0, #8
	uxtb r1, r_af
	orrs  r0, r1
	mov  r_af, r0
	adds  r_t, #9
	pop  {pc}

op3b:
	mov  r0, r_sp
	subs  r0, #1
	uxth r0, r0
	mov  r_sp, r0
	adds  r_t, #2
	bx   lr

op3c:
	lsrs  r0, r_af, #8
	push {lr}
	bl   inc8
	lsls  r0, #8
	uxtb r1, r_af
	orrs  r0, r1
	mov  r_af, r0
	pop  {pc}

op3d:
	lsrs  r0, r_af, #8
	push {lr}
	bl   dec8
	lsls  r0, #8
	uxtb r1, r_af
	orrs  r0, r1
	mov  r_af, r0
	pop  {pc}

op3e:
	mov  r0, r_pc
	push {lr}
	bl   read8inc
	mov  r_pc, r1
	lsls r0, #8
	uxtb r1, r_af
	orrs  r0, r1
	mov  r_af, r0
	adds  r_t, #3
	pop  {pc}

op3f:
	movs  r1, #CF
	lsrs  r0, r_af, #1
	bcc  1f
	movs  r1, #HF
1:
	preserve_only_flags r0, PV|ZF|SF
	orrs  r_af, r1
	lsrs  r0, r_af, #8
	movs  r1, #(F3|F5)
	ands  r0, r1
	orrs  r_af, r0
	bx   lr

op40:
	bx   lr

.ltorg
op41:
	mov  r0, r_bc
	uxtb r0, r0
	lsls r0, #8
	mov  r1, r_bc
	uxtb r1, r1
	orrs  r0, r1
	mov  r_bc, r0
	bx   lr

op42:
	mov  r0, r_de
	lsrs  r0, #8
	lsls  r0, #8
	mov  r1, r_bc
	uxtb r1, r1
	orrs  r0, r1
	mov  r_bc, r0
	bx   lr

op43:
	mov  r0, r_de
	uxtb r0, r0
	lsls r0, #8
	mov  r1, r_bc
	uxtb r1, r1
	orrs  r0, r1
	mov  r_bc, r0
	bx   lr

op44:
	mov  r0, r_hl
	lsrs  r0, #8
	lsls  r0, #8
	mov  r1, r_bc
	uxtb r1, r1
	orrs  r0, r1
	mov  r_bc, r0
	bx   lr

op45:
	mov  r0, r_hl
	uxtb r0, r0
	lsls r0, #8
	mov  r1, r_bc
	uxtb r1, r1
	orrs  r0, r1
	mov  r_bc, r0
	bx   lr

op46:
	mov  r0, r_hl
	read8_internal r0
	lsls r0, #8
	mov  r1, r_bc
	uxtb r1, r1
	orrs  r0, r1
	mov  r_bc, r0
	adds  r_t, #3
	bx   lr

op47:
	lsrs  r0, r_af, #8
	lsls  r0, #8
	mov  r1, r_bc
	uxtb r1, r1
	orrs  r0, r1
	mov  r_bc, r0
	bx   lr

op48:
	mov  r0, r_bc
	lsrs  r0, #8
	mov  r1, r_bc
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r0
	mov  r_bc, r1
	bx   lr

op49:
	bx   lr

op4a:
	mov  r0, r_de
	lsrs  r0, #8
	mov  r1, r_bc
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r0
	mov  r_bc, r1
	bx   lr

op4b:
	mov  r0, r_de
	uxtb r0, r0
	mov  r1, r_bc
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r0
	mov  r_bc, r1
	bx   lr

op4c:
	mov  r0, r_hl
	lsrs  r0, #8
	mov  r1, r_bc
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r0
	mov  r_bc, r1
	bx   lr

op4d:
	mov  r0, r_hl
	uxtb r0, r0
	mov  r1, r_bc
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r0
	mov  r_bc, r1
	bx   lr

op4e:
	mov  r0, r_hl
	read8_internal r0
	mov  r1, r_bc
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r0
	mov  r_bc, r1
	adds  r_t, #3
	bx   lr

op4f:
	lsrs  r0, r_af, #8
	mov  r1, r_bc
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r0
	mov  r_bc, r1
	bx   lr

op50:
	mov  r0, r_bc
	lsrs  r0, #8
	lsls  r0, #8
	mov  r1, r_de
	uxtb r1, r1
	orrs  r0, r1
	mov  r_de, r0
	bx   lr

op51:
	mov  r0, r_bc
	uxtb r0, r0
	lsls r0, #8
	mov  r1, r_de
	uxtb r1, r1
	orrs  r0, r1
	mov  r_de, r0
	bx   lr

op52:
	bx   lr

op53:
	mov  r0, r_de
	uxtb r0, r0
	lsls r0, #8
	mov  r1, r_de
	uxtb r1, r1
	orrs  r0, r1
	mov  r_de, r0
	bx   lr

op54:
	mov  r0, r_hl
	lsrs  r0, #8
	lsls  r0, #8
	mov  r1, r_de
	uxtb r1, r1
	orrs  r0, r1
	mov  r_de, r0
	bx   lr

op55:
	mov  r0, r_hl
	uxtb r0, r0
	lsls r0, #8
	mov  r1, r_de
	uxtb r1, r1
	orrs  r0, r1
	mov  r_de, r0
	bx   lr

op56:
	mov  r0, r_hl
	read8_internal r0
	lsls r0, #8
	mov  r1, r_de
	uxtb r1, r1
	orrs  r0, r1
	mov  r_de, r0
	adds  r_t, #3
	bx   lr

op57:
	lsrs  r0, r_af, #8
	lsls  r0, #8
	mov  r1, r_de
	uxtb r1, r1
	orrs  r0, r1
	mov  r_de, r0
	bx   lr

op58:
	mov  r0, r_bc
	lsrs  r0, #8
	mov  r1, r_de
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r0
	mov  r_de, r1
	bx   lr

op59:
	mov  r0, r_bc
	uxtb r0, r0
	mov  r1, r_de
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r0
	mov  r_de, r1
	bx   lr

op5a:
	mov  r0, r_de
	lsrs  r0, #8
	mov  r1, r_de
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r0
	mov  r_de, r1
	bx   lr

op5b:
	bx   lr

op5c:
	mov  r0, r_hl
	lsrs  r0, #8
	mov  r1, r_de
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r0
	mov  r_de, r1
	bx   lr

op5d:
	mov  r0, r_hl
	uxtb r0, r0
	mov  r1, r_de
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r0
	mov  r_de, r1
	bx   lr

op5e:
	mov  r0, r_hl
	read8_internal r0
	mov  r1, r_de
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r0
	mov  r_de, r1
	adds  r_t, #3
	bx   lr

op5f:
	lsrs  r0, r_af, #8
	mov  r1, r_de
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r0
	mov  r_de, r1
	bx   lr

op60:
	mov  r0, r_bc
	lsrs  r0, #8
	lsls  r0, #8
	mov  r1, r_hl
	uxtb r1, r1
	orrs  r0, r1
	mov  r_hl, r0
	bx   lr

.ltorg
op61:
	mov  r0, r_bc
	uxtb r0, r0
	lsls r0, #8
	mov  r1, r_hl
	uxtb r1, r1
	orrs  r0, r1
	mov  r_hl, r0
	bx   lr

op62:
	mov  r0, r_de
	lsrs  r0, #8
	lsls  r0, #8
	mov  r1, r_hl
	uxtb r1, r1
	orrs  r0, r1
	mov  r_hl, r0
	bx   lr

op63:
	mov  r0, r_de
	uxtb r0, r0
	lsls r0, #8
	mov  r1, r_hl
	uxtb r1, r1
	orrs  r0, r1
	mov  r_hl, r0
	bx   lr

op64:
	bx   lr

op65:
	mov  r0, r_hl
	uxtb r0, r0
	lsls r0, #8
	mov  r1, r_hl
	uxtb r1, r1
	orrs  r0, r1
	mov  r_hl, r0
	bx   lr

op66:
	mov  r0, r_hl
	read8_internal r0
	lsls r0, #8
	mov  r1, r_hl
	uxtb r1, r1
	orrs  r0, r1
	mov  r_hl, r0
	adds  r_t, #3
	bx   lr

op67:
	lsrs  r0, r_af, #8
	lsls  r0, #8
	mov  r1, r_hl
	uxtb r1, r1
	orrs  r0, r1
	mov  r_hl, r0
	bx   lr

op68:
	mov  r0, r_bc
	lsrs  r0, #8
	mov  r1, r_hl
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r0
	mov  r_hl, r1
	bx   lr

op69:
	mov  r0, r_bc
	uxtb r0, r0
	mov  r1, r_hl
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r0
	mov  r_hl, r1
	bx   lr

op6a:
	mov  r0, r_de
	lsrs  r0, #8
	mov  r1, r_hl
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r0
	mov  r_hl, r1
	bx   lr

op6b:
	mov  r0, r_de
	uxtb r0, r0
	mov  r1, r_hl
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r0
	mov  r_hl, r1
	bx   lr

op6c:
	mov  r0, r_hl
	lsrs  r0, #8
	mov  r1, r_hl
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r0
	mov  r_hl, r1
	bx   lr

op6d:
	bx   lr

op6e:
	mov  r0, r_hl
	read8_internal r0
	mov  r1, r_hl
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r0
	mov  r_hl, r1
	adds  r_t, #3
	bx   lr

op6f:
	lsrs  r0, r_af, #8
	mov  r1, r_hl
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r0
	mov  r_hl, r1
	bx   lr

op70:
	adds  r_t, #3
	mov  r0, r_bc
	lsrs  r0, #8
	mov  r1, r_hl
	ldr  r2, =write8
	bx   r2

op71:
	adds  r_t, #3
	mov  r0, r_bc		// high half of word is ignored later
	mov  r1, r_hl
	ldr  r2, =write8
	bx   r2

op72:
	adds  r_t, #3
	mov  r0, r_de
	lsrs  r0, #8
	mov  r1, r_hl
	ldr  r2, =write8
	bx   r2

op73:
	adds  r_t, #3
	mov  r0, r_de		// high half of word is ignored later
	mov  r1, r_hl
	ldr  r2, =write8
	bx   r2

op74:
	adds  r_t, #3
	mov  r0, r_hl
	lsrs  r0, #8
	mov  r1, r_hl
	ldr  r2, =write8
	bx   r2

op75:
	adds  r_t, #3
	mov  r0, r_hl		// high half of word is ignored later
	mov  r1, r_hl
	ldr  r2, =write8
	bx   r2

op76:
	movs  r0, #1
	ldr  r1, =z80a_resting_state
	strb r0, [r1, #11] // halted
#ifndef USE_Z80_ARM_OFFSET_T
	ldr  r0, frame_tacts
#else
	movs  r0, #0
#endif
	subs  r0, r_t
	movs  r1, #3
	adds  r0, r1
	bics  r0, r1
	add  r_t, r0
#ifndef NO_UPDATE_RLOW_IN_FETCH
	ldr  r1, =z80a_resting_state
	ldrb r1, [r1, #12] // r_low
	lsrs  r0, #2
	add  r0, r1
	ldr  r1, =z80a_resting_state
	strb r0, [r1, #12] // r_low
#endif
	bx   lr

op77:
	adds  r_t, #3
	mov  r0, r_af
	lsrs  r0, #8
	mov  r1, r_hl
	ldr  r2, =write8
	bx   r2

op78:
	mov  r0, r_bc
	lsrs  r0, #8
	lsls  r0, #8
	uxtb r1, r_af
	orrs  r0, r1
	mov  r_af, r0
	bx   lr

op79:
	mov  r0, r_bc
	uxtb r0, r0
	lsls r0, #8
	uxtb r1, r_af
	orrs  r0, r1
	mov  r_af, r0
	bx   lr

op7a:
	mov  r0, r_de
	lsrs  r0, #8
	lsls  r0, #8
	uxtb r1, r_af
	orrs  r0, r1
	mov  r_af, r0
	bx   lr

op7b:
	mov  r0, r_de
	uxtb r0, r0
	lsls r0, #8
	uxtb r1, r_af
	orrs  r0, r1
	mov  r_af, r0
	bx   lr

op7c:
	mov  r0, r_hl
	lsrs  r0, #8
	lsls  r0, #8
	uxtb r1, r_af
	orrs  r0, r1
	mov  r_af, r0
	bx   lr

op7d:
	mov  r0, r_hl
	uxtb r0, r0
	lsls r0, #8
	uxtb r1, r_af
	orrs  r0, r1
	mov  r_af, r0
	bx   lr

op7e:
	mov  r0, r_hl
	read8_internal r0
	lsls r0, #8
	uxtb r1, r_af
	orrs  r0, r1
	mov  r_af, r0
	adds  r_t, #3
	bx   lr

op7f:
	bx   lr

op80:
	mov  r0, r_bc
	lsrs  r0, #8
	ldr  r2, =add8
	bx   r2

.ltorg
op81:
	mov  r0, r_bc
	uxtb r0, r0
	ldr  r2, =add8
	bx   r2

op82:
	mov  r0, r_de
	lsrs  r0, #8
	ldr  r2, =add8
	bx   r2

op83:
	mov  r0, r_de
	uxtb r0, r0
	ldr  r2, =add8
	bx   r2

op84:
	mov  r0, r_hl
	lsrs  r0, #8
	ldr  r2, =add8
	bx   r2

op85:
	mov  r0, r_hl
	uxtb r0, r0
	ldr  r2, =add8
	bx   r2

op86:
	mov  r0, r_hl
	read8_internal r0
	push {lr}
	bl   add8
	adds  r_t, #3
	pop  {pc}

op87:
	lsrs  r0, r_af, #8
	ldr  r2, =add8
	bx   r2

op88:
	mov  r0, r_bc
	lsrs  r0, #8
	ldr  r2, =adc8
	bx   r2

op89:
	mov  r0, r_bc
	uxtb r0, r0
	ldr  r2, =adc8
	bx   r2

op8a:
	mov  r0, r_de
	lsrs  r0, #8
	ldr  r2, =adc8
	bx   r2

op8b:
	mov  r0, r_de
	uxtb r0, r0
	ldr  r2, =adc8
	bx   r2

op8c:
	mov  r0, r_hl
	lsrs  r0, #8
	ldr  r2, =adc8
	bx   r2

op8d:
	mov  r0, r_hl
	uxtb r0, r0
	ldr  r2, =adc8
	bx   r2

op8e:
	mov  r0, r_hl
	read8_internal r0
	push {lr}
	bl   adc8
	adds  r_t, #3
	pop  {pc}

op8f:
	lsrs  r0, r_af, #8
	ldr  r2, =adc8
	bx   r2

op90:
	mov  r0, r_bc
	lsrs  r0, #8
	ldr  r2, =sub8
	bx   r2

op91:
	mov  r0, r_bc
	uxtb r0, r0
	ldr  r2, =sub8
	bx   r2

op92:
	mov  r0, r_de
	lsrs  r0, #8
	ldr  r2, =sub8
	bx   r2

op93:
	mov  r0, r_de
	uxtb r0, r0
	ldr  r2, =sub8
	bx   r2

op94:
	mov  r0, r_hl
	lsrs  r0, #8
	ldr  r2, =sub8
	bx   r2

op95:
	mov  r0, r_hl
	uxtb r0, r0
	ldr  r2, =sub8
	bx   r2

op96:
	mov  r0, r_hl
	read8_internal r0
	push {lr}
	bl   sub8
	adds  r_t, #3
	pop  {pc}

op97:
	movs  r_af, #66
	bx   lr

op98:
	mov  r0, r_bc
	lsrs  r0, #8
	ldr  r2, =sbc8
	bx   r2

op99:
	mov  r0, r_bc
	uxtb r0, r0
	ldr  r2, =sbc8
	bx   r2

op9a:
	mov  r0, r_de
	lsrs  r0, #8
	ldr  r2, =sbc8
	bx   r2

op9b:
	mov  r0, r_de
	uxtb r0, r0
	ldr  r2, =sbc8
	bx   r2

op9c:
	mov  r0, r_hl
	lsrs  r0, #8
	ldr  r2, =sbc8
	bx   r2

op9d:
	mov  r0, r_hl
	uxtb r0, r0
	ldr  r2, =sbc8
	bx   r2

op9e:
	mov  r0, r_hl
	read8_internal r0
	push {lr}
	bl   sbc8
	adds  r_t, #3
	pop  {pc}

op9f:
	lsrs  r0, r_af, #8
	ldr  r2, =sbc8
	bx   r2

opa0:
	mov  r0, r_bc
	lsrs  r0, #8
	ldr  r2, =ands8
	bx   r2

.ltorg
opa1:
	mov  r0, r_bc
	uxtb r0, r0
	ldr  r2, =ands8
	bx   r2

opa2:
	mov  r0, r_de
	lsrs  r0, #8
	ldr  r2, =ands8
	bx   r2

opa3:
	mov  r0, r_de
	uxtb r0, r0
	ldr  r2, =ands8
	bx   r2

opa4:
	mov  r0, r_hl
	lsrs  r0, #8
	ldr  r2, =ands8
	bx   r2

opa5:
	mov  r0, r_hl
	uxtb r0, r0
	ldr  r2, =ands8
	bx   r2

opa6:
	mov  r0, r_hl
	read8_internal r0
	push {lr}
	bl   ands8
	adds  r_t, #3
	pop  {pc}

opa7:
	lsrs  r0, r_af, #8
	ldr  r2, =ands8
	bx   r2

opa8:
	mov  r0, r_bc
	lsrs  r0, #8
	ldr  r2, =xor8
	bx   r2

opa9:
	mov  r0, r_bc
	uxtb r0, r0
	ldr  r2, =xor8
	bx   r2

opaa:
	mov  r0, r_de
	lsrs  r0, #8
	ldr  r2, =xor8
	bx   r2

opab:
	mov  r0, r_de
	uxtb r0, r0
	ldr  r2, =xor8
	bx   r2

opac:
	mov  r0, r_hl
	lsrs  r0, #8
	ldr  r2, =xor8
	bx   r2

opad:
	mov  r0, r_hl
	uxtb r0, r0
	ldr  r2, =xor8
	bx   r2

opae:
	mov  r0, r_hl
	read8_internal r0
	push {lr}
	bl   xor8
	adds  r_t, #3
	pop  {pc}

opaf:
	movs  r_af, #68
	bx   lr

opb0:
	mov  r0, r_bc
	lsrs  r0, #8
	ldr  r2, =or8
	bx   r2

opb1:
	mov  r0, r_bc
	uxtb r0, r0
	ldr  r2, =or8
	bx   r2

opb2:
	mov  r0, r_de
	lsrs  r0, #8
	ldr  r2, =or8
	bx   r2

opb3:
	mov  r0, r_de
	uxtb r0, r0
	ldr  r2, =or8
	bx   r2

opb4:
	mov  r0, r_hl
	lsrs  r0, #8
	ldr  r2, =or8
	bx   r2

opb5:
	mov  r0, r_hl
	uxtb r0, r0
	ldr  r2, =or8
	bx   r2

opb6:
	mov  r0, r_hl
	read8_internal r0
	push {lr}
	bl   or8
	adds  r_t, #3
	pop  {pc}

opb7:
	lsrs  r0, r_af, #8
	ldr  r2, =or8
	bx   r2

opb8:
	mov  r0, r_bc
	lsrs  r0, #8
	ldr  r2, =cp8
	bx   r2

opb9:
	mov  r0, r_bc
	uxtb r0, r0
	ldr  r2, =cp8
	bx   r2

opba:
	mov  r0, r_de
	lsrs  r0, #8
	ldr  r2, =cp8
	bx   r2

opbb:
	mov  r0, r_de
	uxtb r0, r0
	ldr  r2, =cp8
	bx   r2

opbc:
	mov  r0, r_hl
	lsrs  r0, #8
	ldr  r2, =cp8
	bx   r2

opbd:
	mov  r0, r_hl
	uxtb r0, r0
	ldr  r2, =cp8
	bx   r2

opbe:
	mov  r0, r_hl
	read8_internal r0
	push {lr}
	bl   cp8
	adds  r_t, #3
	pop  {pc}

opbf:
	lsrs  r0, r_af, #8
	ldr  r2, =cp8
	bx   r2

opc0:
	lsrs  r0, r_af, #7
	bcs  3f
	mov  r0, r_sp
	push {lr}
	bl   read16inc
	mov  r_sp, r1
	mov  r_memptr, r0
	mov  r_pc, r_memptr
	adds  r_t, #7
	pop  {pc}

3:
	adds  r_t, #1
	bx   lr

.ltorg
opc1:
	mov  r0, r_sp
	push {lr}
	bl   read16inc
	mov  r_sp, r1
	mov  r_bc, r0
	adds  r_t, #6
	pop  {pc}

opc2:
	adds  r_t, #6
	mov  r0, r_pc
	push {lr}
	bl   read16
	mov  r_memptr, r0
	lsrs  r0, r_af, #7
	bcs  3f
	mov  r_pc, r_memptr
	pop  {pc}

3:
	adds  r_pc, #2
	uxth r_pc, r_pc
	pop  {pc}

opc3:
	mov  r0, r_pc
	push {lr}
	bl   read16
	mov  r_pc, r0
	mov  r_memptr, r_pc
	adds  r_t, #6
	pop  {pc}

opc4:
	mov  r0, r_pc
	push {lr}
	bl   read16inc
	mov  r_pc, r1
	mov  r_memptr, r0
	lsrs  r0, r_af, #7
	bcs  3f
	mov  r0, r_pc
	bl   _push
	mov  r_pc, r_memptr
	adds  r_t, #13
	pop  {pc}

3:
	adds  r_t, #6
	pop  {pc}

opc5:
	adds  r_t, #7
	mov  r0, r_bc
	ldr  r2, =_push
	bx   r2

opc6:
	mov  r0, r_pc
	push {lr}
	bl   read8inc
	mov  r_pc, r1
	bl   add8
	adds  r_t, #3
	pop  {pc}

opc7:
	mov  r0, r_pc
	push {lr}
	bl   _push
	movs  r_pc, #0
	movs  r0, #0
	mov  r_memptr, r0
	adds  r_t, #7
	pop  {pc}

opc8:
	lsrs  r0, r_af, #7
	bcc  2f
	mov  r0, r_sp
	push {lr}
	bl   read16inc
	mov  r_sp, r1
	mov  r_memptr, r0
	mov  r_pc, r_memptr
	adds  r_t, #7
	pop  {pc}

2:
	adds  r_t, #1
	bx   lr

opc9:
	mov  r0, r_sp
	push {lr}
	bl   read16inc
	mov  r_sp, r1
	mov  r_memptr, r0
	mov  r_pc, r_memptr
	adds  r_t, #6
	pop  {pc}

opca:
	adds  r_t, #6
	mov  r0, r_pc
	push {lr}
	bl   read16
	mov  r_memptr, r0
	lsrs  r0, r_af, #7
	bcc  2f
	mov  r_pc, r_memptr
	pop  {pc}

2:
	adds  r_pc, #2
	uxth r_pc, r_pc
	pop  {pc}

opcb:
	ldr  r_temp, =opl_table
	fetch
	lsls  r0, #1
	ldrh r0, [r_temp, r0]
	sxth r0, r0
	add  r0, r_temp
	bx   r0
	bx   lr

opcc:
	mov  r0, r_pc
	push {lr}
	bl   read16inc
	mov  r_pc, r1
	mov  r_memptr, r0
	lsrs  r0, r_af, #7
	bcc  2f
	mov  r0, r_pc
	bl   _push
	mov  r_pc, r_memptr
	adds  r_t, #13
	pop  {pc}

2:
	adds  r_t, #6
	pop  {pc}

opcd:
	mov  r0, r_pc
	push {lr}
	bl   read16inc
	mov  r_pc, r1
	mov  r_temp, r0
	mov  r0, r_pc
	bl   _push
	mov  r_pc, r_temp
	mov  r_memptr, r_temp
	adds  r_t, #13
	pop  {pc}

opce:
	mov  r0, r_pc
	push {lr}
	bl   read8inc
	mov  r_pc, r1
	bl   adc8
	adds  r_t, #3
	pop  {pc}

opcf:
	movs  r_temp, #8
	mov  r0, r_pc
	push {lr}
	bl   _push
	mov  r_pc, r_temp
	mov  r_memptr, r_temp
	adds  r_t, #7
	pop  {pc}

opd0:
	lsrs  r0, r_af, #1
	bcs  3f
	mov  r0, r_sp
	push {lr}
	bl   read16inc
	mov  r_sp, r1
	mov  r_memptr, r0
	mov  r_pc, r_memptr
	adds  r_t, #7
	pop  {pc}

3:
	adds  r_t, #1
	bx   lr

opd1:
	mov  r0, r_sp
	push {lr}
	bl   read16inc
	mov  r_sp, r1
	mov  r_de, r0
	adds  r_t, #6
	pop  {pc}

opd2:
	adds  r_t, #6
	mov  r0, r_pc
	push {lr}
	bl   read16
	mov  r_memptr, r0
	lsrs  r0, r_af, #1
	bcs  3f
	mov  r_pc, r_memptr
	pop  {pc}

3:
	adds  r_pc, #2
	uxth r_pc, r_pc
	pop  {pc}

opd3:
	mov  r0, r_pc
	push {lr}
	bl   read8inc
	mov  r_pc, r1
	mov  r_temp, r0
	adds  r_t, #7
	lsrs  r1, r_af, #8
	lsls  r1, #8
	adds  r0, r_temp, #1
	uxtb r0, r0
	orrs  r0, r1
	mov  r_memptr, r0
	mov  r0, r_af
	lsrs  r0, #8
	orrs  r1, r_temp
	bl   iowrite8
	pop  {pc}

opd4:
	mov  r0, r_pc
	push {lr}
	bl   read16inc
	mov  r_pc, r1
	mov  r_memptr, r0
	lsrs  r0, r_af, #1
	bcs  3f
	mov  r0, r_pc
	bl   _push
	mov  r_pc, r_memptr
	adds  r_t, #13
	pop  {pc}

3:
	adds  r_t, #6
	pop  {pc}

opd5:
	adds  r_t, #7
	mov  r0, r_de
	ldr  r2, =_push
	bx   r2

opd6:
	mov  r0, r_pc
	push {lr}
	bl   read8inc
	mov  r_pc, r1
	bl   sub8
	adds  r_t, #3
	pop  {pc}

opd7:
	movs  r_temp, #16
	mov  r0, r_pc
	push {lr}
	bl   _push
	mov  r_pc, r_temp
	mov  r_memptr, r_temp
	adds  r_t, #7
	pop  {pc}

opd8:
	lsrs  r0, r_af, #1
	bcc  2f
	mov  r0, r_sp
	push {lr}
	bl   read16inc
	mov  r_sp, r1
	mov  r_memptr, r0
	mov  r_pc, r_memptr
	adds  r_t, #7
	pop  {pc}

2:
	adds  r_t, #1
	bx   lr

opd9:
	ldr  r2, =z80a_resting_state
	mov  r0, r_bc
	ldr  r1, [r2, #64] // alt.bc
	str  r0, [r2, #64] // alt.bc
	mov  r_bc, r1
	mov  r0, r_de
	ldr  r1, [r2, #68] // alt.de
	str  r0, [r2, #68] // alt.de
	mov  r_de, r1
	mov  r0, r_hl
	ldr  r1, [r2, #72] // alt.hl
	str  r0, [r2, #72] // alt.hl
	mov  r_hl, r1
	bx   lr

opda:
	adds  r_t, #6
	mov  r0, r_pc
	push {lr}
	bl   read16
	mov  r_memptr, r0
	lsrs  r0, r_af, #1
	bcc  2f
	mov  r_pc, r_memptr
	pop  {pc}

2:
	adds  r_pc, #2
	uxth r_pc, r_pc
	pop  {pc}

opdb:
	mov  r0, r_pc
	push {lr}
	bl   read8inc
	mov  r_pc, r1
	mov  r_temp, r0
	lsrs  r1, r_af, #8
	lsls  r1, #8
	orrs  r_temp, r1
	adds  r0, r_temp, #1
	uxth r0, r0
	mov  r_memptr, r0
	adds  r_t, #7
	mov  r0, r_temp
	bl   ioread8
	lsls r0, #8
	uxtb r1, r_af
	orrs  r0, r1
	mov  r_af, r0
	pop  {pc}

opdc:
	mov  r0, r_pc
	push {lr}
	bl   read16inc
	mov  r_pc, r1
	mov  r_memptr, r0
	lsrs  r0, r_af, #1
	bcc  2f
	mov  r0, r_pc
	bl   _push
	mov  r_pc, r_memptr
	adds  r_t, #13
	pop  {pc}

2:
	adds  r_t, #6
	pop  {pc}

opdd:
	movs  r0, #0xdd
	ldr  r2, =opDDFD
	bx   r2

opde:
	mov  r0, r_pc
	push {lr}
	bl   read8inc
	mov  r_pc, r1
	bl   sbc8
	adds  r_t, #3
	pop  {pc}

opdf:
	movs  r_temp, #24
	mov  r0, r_pc
	push {lr}
	bl   _push
	mov  r_pc, r_temp
	mov  r_memptr, r_temp
	adds  r_t, #7
	pop  {pc}

ope0:
	lsrs  r0, r_af, #3
	bcs  3f
	mov  r0, r_sp
	push {lr}
	bl   read16inc
	mov  r_sp, r1
	mov  r_memptr, r0
	mov  r_pc, r_memptr
	adds  r_t, #7
	pop  {pc}

3:
	adds  r_t, #1
	bx   lr

.ltorg
ope1:
	mov  r0, r_sp
	push {lr}
	bl   read16inc
	mov  r_sp, r1
	mov  r_hl, r0
	adds  r_t, #6
	pop  {pc}

ope2:
	adds  r_t, #6
	mov  r0, r_pc
	push {lr}
	bl   read16
	mov  r_memptr, r0
	lsrs  r0, r_af, #3
	bcs  3f
	mov  r_pc, r_memptr
	pop  {pc}

3:
	adds  r_pc, #2
	uxth r_pc, r_pc
	pop  {pc}

ope3:
	mov  r0, r_sp
	push {lr}
	bl   read16
	mov  r_temp, r0
	mov  r0, r_hl
	mov  r1, r_sp
	bl   write16
	mov  r_memptr, r_temp
	mov  r_hl, r_temp
	adds  r_t, #15
	pop  {pc}

ope4:
	mov  r0, r_pc
	push {lr}
	bl   read16inc
	mov  r_pc, r1
	mov  r_memptr, r0
	lsrs  r0, r_af, #3
	bcs  3f
	mov  r0, r_pc
	bl   _push
	mov  r_pc, r_memptr
	adds  r_t, #13
	pop  {pc}

3:
	adds  r_t, #6
	pop  {pc}

ope5:
	adds  r_t, #7
	mov  r0, r_hl
	ldr  r2, =_push
	bx   r2

ope6:
	mov  r0, r_pc
	push {lr}
	bl   read8inc
	mov  r_pc, r1
	bl   ands8
	adds  r_t, #3
	pop  {pc}

ope7:
	movs  r_temp, #32
	mov  r0, r_pc
	push {lr}
	bl   _push
	mov  r_pc, r_temp
	mov  r_memptr, r_temp
	adds  r_t, #7
	pop  {pc}

ope8:
	lsrs  r0, r_af, #3
	bcc  2f
	mov  r0, r_sp
	push {lr}
	bl   read16inc
	mov  r_sp, r1
	mov  r_memptr, r0
	mov  r_pc, r_memptr
	adds  r_t, #7
	pop  {pc}

2:
	adds  r_t, #1
	bx   lr

ope9:
	mov  r_pc, r_hl
	bx   lr

opea:
	adds  r_t, #6
	mov  r0, r_pc
	push {lr}
	bl   read16
	mov  r_memptr, r0
	lsrs  r0, r_af, #3
	bcc  2f
	mov  r_pc, r_memptr
	pop  {pc}

2:
	adds  r_pc, #2
	uxth r_pc, r_pc
	pop  {pc}

opeb:
	mov  r_temp, r_de
	mov  r_de, r_hl
	mov  r_hl, r_temp
	bx   lr

opec:
	mov  r0, r_pc
	push {lr}
	bl   read16inc
	mov  r_pc, r1
	mov  r_memptr, r0
	lsrs  r0, r_af, #3
	bcc  2f
	mov  r0, r_pc
	bl   _push
	mov  r_pc, r_memptr
	adds  r_t, #13
	pop  {pc}

2:
	adds  r_t, #6
	pop  {pc}

oped:
	push {lr}
	ldr  r_temp, =ope_table
	step_op_table_in_r_temp_maybe_neg
	pop  {pc}

opee:
	mov  r0, r_pc
	push {lr}
	bl   read8inc
	mov  r_pc, r1
	bl   xor8
	adds  r_t, #3
	pop  {pc}

opef:
	movs  r_temp, #40
	mov  r0, r_pc
	push {lr}
	bl   _push
	mov  r_pc, r_temp
	mov  r_memptr, r_temp
	adds  r_t, #7
	pop  {pc}

opf0:
	lsrs  r0, r_af, #8
	bcs  3f
	mov  r0, r_sp
	push {lr}
	bl   read16inc
	mov  r_sp, r1
	mov  r_memptr, r0
	mov  r_pc, r_memptr
	adds  r_t, #7
	pop  {pc}

3:
	adds  r_t, #1
	bx   lr

opf1:
	mov  r0, r_sp
	push {lr}
	bl   read16inc
	mov  r_sp, r1
	mov  r_af, r0
	adds  r_t, #6
	pop  {pc}

opf2:
	adds  r_t, #6
	mov  r0, r_pc
	push {lr}
	bl   read16
	mov  r_memptr, r0
	lsrs  r0, r_af, #8
	bcs  3f
	mov  r_pc, r_memptr
	pop  {pc}

3:
	adds  r_pc, #2
	uxth r_pc, r_pc
	pop  {pc}

opf3:
	movs  r0, #0
	ldr  r1, =z80a_resting_state
	strb r0, [r1, #9] // iff1
	movs  r0, #0
	ldr  r1, =z80a_resting_state
	strb r0, [r1, #10] // iff2
	bx   lr

opf4:
	mov  r0, r_pc
	push {lr}
	bl   read16inc
	mov  r_pc, r1
	mov  r_memptr, r0
	lsrs  r0, r_af, #8
	bcs  3f
	mov  r0, r_pc
	bl   _push
	mov  r_pc, r_memptr
	adds  r_t, #13
	pop  {pc}

3:
	adds  r_t, #6
	pop  {pc}

opf5:
	adds  r_t, #7
	mov  r0, r_af
	ldr  r2, =_push
	bx   r2

opf6:
	mov  r0, r_pc
	push {lr}
	bl   read8inc
	mov  r_pc, r1
	bl   or8
	adds  r_t, #3
	pop  {pc}

opf7:
	movs  r_temp, #48
	mov  r0, r_pc
	push {lr}
	bl   _push
	mov  r_pc, r_temp
	mov  r_memptr, r_temp
	adds  r_t, #7
	pop  {pc}

opf8:
	lsrs  r0, r_af, #8
	bcc  2f
	mov  r0, r_sp
	push {lr}
	bl   read16inc
	mov  r_sp, r1
	mov  r_memptr, r0
	mov  r_pc, r_memptr
	adds  r_t, #7
	pop  {pc}

2:
	adds  r_t, #1
	bx   lr

opf9:
	mov  r_sp, r_hl
	adds  r_t, #2
	bx   lr

opfa:
	adds  r_t, #6
	mov  r0, r_pc
	push {lr}
	bl   read16
	mov  r_memptr, r0
	lsrs  r0, r_af, #8
	bcc  2f
	mov  r_pc, r_memptr
	pop  {pc}

2:
	adds  r_pc, #2
	uxth r_pc, r_pc
	pop  {pc}

opfb:
	movs  r0, #1
	ldr  r1, =z80a_resting_state
	strb r0, [r1, #10] // iff2
	ldr  r1, =z80a_resting_state
	strb r0, [r1, #9] // iff1
	mov  r0, r_t
	ldr  r1, =z80a_resting_state
	str  r0, [r1, #4] // eipos
	bx   lr

opfc:
	mov  r0, r_pc
	push {lr}
	bl   read16inc
	mov  r_pc, r1
	mov  r_memptr, r0
	lsrs  r0, r_af, #8
	bcc  2f
	mov  r0, r_pc
	bl   _push
	mov  r_pc, r_memptr
	adds  r_t, #13
	pop  {pc}

2:
	adds  r_t, #6
	pop  {pc}

opfd:
	movs  r0, #0xfd
	ldr  r2, =opDDFD
	bx   r2

opfe:
	mov  r0, r_pc
	push {lr}
	bl   read8inc
	mov  r_pc, r1
	bl   cp8
	adds  r_t, #3
	pop  {pc}

opff:
	movs  r_temp, #56
	mov  r0, r_pc
	push {lr}
	bl   _push
	mov  r_pc, r_temp
	mov  r_memptr, r_temp
	adds  r_t, #7
	pop  {pc}

.ltorg
// === END top level opcodes

// === BEGIN OPL inner logic functions which do core work on r_temp
opli_r35_table:
.short opli_r35_00 + 1 - opli_r35_table
.short opli_r35_08 + 1 - opli_r35_table
.short opli_r35_10 + 1 - opli_r35_table
.short opli_r35_18 + 1 - opli_r35_table
.short opli_r35_20 + 1 - opli_r35_table
.short opli_r35_28 + 1 - opli_r35_table
.short opli_r35_30 + 1 - opli_r35_table
.short opli_r35_38 + 1 - opli_r35_table
.short opli_r35_40 + 1 - opli_r35_table
.short opli_r35_48 + 1 - opli_r35_table
.short opli_r35_50 + 1 - opli_r35_table
.short opli_r35_58 + 1 - opli_r35_table
.short opli_r35_60 + 1 - opli_r35_table
.short opli_r35_68 + 1 - opli_r35_table
.short opli_r35_70 + 1 - opli_r35_table
.short opli_r35_78 + 1 - opli_r35_table
.short opli_r35_80 + 1 - opli_r35_table
.short opli_r35_88 + 1 - opli_r35_table
.short opli_r35_90 + 1 - opli_r35_table
.short opli_r35_98 + 1 - opli_r35_table
.short opli_r35_a0 + 1 - opli_r35_table
.short opli_r35_a8 + 1 - opli_r35_table
.short opli_r35_b0 + 1 - opli_r35_table
.short opli_r35_b8 + 1 - opli_r35_table
.short opli_r35_c0 + 1 - opli_r35_table
.short opli_r35_c8 + 1 - opli_r35_table
.short opli_r35_d0 + 1 - opli_r35_table
.short opli_r35_d8 + 1 - opli_r35_table
.short opli_r35_e0 + 1 - opli_r35_table
.short opli_r35_e8 + 1 - opli_r35_table
.short opli_r35_f0 + 1 - opli_r35_table
.short opli_r35_f8 + 1 - opli_r35_table
opddcb_bitX_table:
.short opddcb_bit + 1 - opddcb_bitX_table
.short opddcb_bit + 1 - opddcb_bitX_table
.short opddcb_bit + 1 - opddcb_bitX_table
.short opddcb_bit + 1 - opddcb_bitX_table
.short opddcb_bit + 1 - opddcb_bitX_table
.short opddcb_bit + 1 - opddcb_bitX_table
.short opddcb_bit + 1 - opddcb_bitX_table
.short opddcb_bit + 1 - opddcb_bitX_table

opddcb_X_table:
.short opddcb_0 + 1 - opddcb_X_table
.short opddcb_1 + 1 - opddcb_X_table
.short opddcb_2 + 1 - opddcb_X_table
.short opddcb_3 + 1 - opddcb_X_table
.short opddcb_4 + 1 - opddcb_X_table
.short opddcb_5 + 1 - opddcb_X_table
.short opddcb_6 + 1 - opddcb_X_table
.short opddcb_7 + 1 - opddcb_X_table

opddcb_0:
	mov  r0, r_memptr
	read8_internal r0
	mov  r_temp, r0		// fine to overwrite hi in r_temp
	push {lr}
	blx  r2
	lsls  r0, r_temp, #8
	mov  r1, r_bc
	uxtb r1, r1
	orrs  r0, r1
	mov  r_bc, r0
	mov  r0, r_temp		// high half of word is ignored later
	mov  r1, r_memptr
	bl   write8
	adds  r_t, #15
	pop  {pc}

opddcb_1:
	mov  r0, r_memptr
	read8_internal r0
	mov  r_temp, r0		// fine to overwrite hi in r_temp
	push {lr}
	blx  r2
	mov  r1, r_bc
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r_temp
	mov  r_bc, r1
	mov  r0, r_temp		// high half of word is ignored later
	mov  r1, r_memptr
	bl   write8
	adds  r_t, #15
	pop  {pc}

opddcb_2:
	mov  r0, r_memptr
	read8_internal r0
	mov  r_temp, r0		// fine to overwrite hi in r_temp
	push {lr}
	blx  r2
	lsls  r0, r_temp, #8
	mov  r1, r_de
	uxtb r1, r1
	orrs  r0, r1
	mov  r_de, r0
	mov  r0, r_temp		// high half of word is ignored later
	mov  r1, r_memptr
	bl   write8
	adds  r_t, #15
	pop  {pc}

opddcb_3:
	mov  r0, r_memptr
	read8_internal r0
	mov  r_temp, r0		// fine to overwrite hi in r_temp
	push {lr}
	blx  r2
	mov  r1, r_de
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r_temp
	mov  r_de, r1
	mov  r0, r_temp		// high half of word is ignored later
	mov  r1, r_memptr
	bl   write8
	adds  r_t, #15
	pop  {pc}

opddcb_4:
	mov  r0, r_memptr
	read8_internal r0
	mov  r_temp, r0		// fine to overwrite hi in r_temp
	push {lr}
	blx  r2
	lsls  r0, r_temp, #8
	mov  r1, r_hl
	uxtb r1, r1
	orrs  r0, r1
	mov  r_hl, r0
	mov  r0, r_temp		// high half of word is ignored later
	mov  r1, r_memptr
	bl   write8
	adds  r_t, #15
	pop  {pc}

opddcb_5:
	mov  r0, r_memptr
	read8_internal r0
	mov  r_temp, r0		// fine to overwrite hi in r_temp
	push {lr}
	blx  r2
	mov  r1, r_hl
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r_temp
	mov  r_hl, r1
	mov  r0, r_temp		// high half of word is ignored later
	mov  r1, r_memptr
	bl   write8
	adds  r_t, #15
	pop  {pc}

opddcb_6:
	mov  r0, r_memptr
	read8_internal r0
	mov  r_temp, r0		// fine to overwrite hi in r_temp
	push {lr}
	blx  r2
	mov  r0, r_temp		// high half of word is ignored later
	mov  r1, r_memptr
	bl   write8
	adds  r_t, #15
	pop  {pc}

opddcb_7:
	mov  r0, r_memptr
	read8_internal r0
	mov  r_temp, r0		// fine to overwrite hi in r_temp
	push {lr}
	blx  r2
	lsls  r0, r_temp, #8
	uxtb r1, r_af
	orrs  r0, r1
	mov  r_af, r0
	mov  r0, r_temp		// high half of word is ignored later
	mov  r1, r_memptr
	bl   write8
	adds  r_t, #15
	pop  {pc}

opddcb_bit:
	adds  r_t, #12
	mov  r0, r_memptr
	read8_internal r0
	mov  r_temp, r0		// fine to overwrite hi in r_temp
	bx  r2

opli_r35_00:
	uxtb r0, r_temp
	push {lr}
	bl   rlc8
	mov  r_temp, r0		// fine to overwrite hi in r_temp
	pop  {pc}

opli_r35_08:
	uxtb r0, r_temp
	push {lr}
	bl   rrc8
	mov  r_temp, r0		// fine to overwrite hi in r_temp
	pop  {pc}

opli_r35_10:
	uxtb r0, r_temp
	push {lr}
	bl   rl8
	mov  r_temp, r0		// fine to overwrite hi in r_temp
	pop  {pc}

opli_r35_18:
	uxtb r0, r_temp
	push {lr}
	bl   rr8
	mov  r_temp, r0		// fine to overwrite hi in r_temp
	pop  {pc}

opli_r35_20:
	uxtb r0, r_temp
	push {lr}
	bl   sla8
	mov  r_temp, r0		// fine to overwrite hi in r_temp
	pop  {pc}

opli_r35_28:
	uxtb r0, r_temp
	push {lr}
	bl   sra8
	mov  r_temp, r0		// fine to overwrite hi in r_temp
	pop  {pc}

opli_r35_30:
	uxtb r0, r_temp
	push {lr}
	bl   sli8
	mov  r_temp, r0		// fine to overwrite hi in r_temp
	pop  {pc}

opli_r35_38:
	uxtb r0, r_temp
	push {lr}
	bl   srl8
	mov  r_temp, r0		// fine to overwrite hi in r_temp
	pop  {pc}

opli_r35_40:
	 // this is the regular version of the inner bit code - it uses r_temp for F3 & F5
	preserve_only_flags r0, CF
	movs  r0, #0x01
	ands  r0, r_temp
	ldr  r1, =_log_f
	ldrb r0, [r1, r0]
	orrs  r_af, r0
	adds  r_af, #HF
	movs  r0, #(F3|F5)
	ands  r0, r_temp
	orrs  r_af, r0		// note this OR is safe because 35 from log_f[r_temp&mask] are <=
	bx   lr

opli_r35_48:
	 // this is the regular version of the inner bit code - it uses r_temp for F3 & F5
	preserve_only_flags r0, CF
	movs  r0, #0x02
	ands  r0, r_temp
	ldr  r1, =_log_f
	ldrb r0, [r1, r0]
	orrs  r_af, r0
	adds  r_af, #HF
	movs  r0, #(F3|F5)
	ands  r0, r_temp
	orrs  r_af, r0		// note this OR is safe because 35 from log_f[r_temp&mask] are <=
	bx   lr

opli_r35_50:
	 // this is the regular version of the inner bit code - it uses r_temp for F3 & F5
	preserve_only_flags r0, CF
	movs  r0, #0x04
	ands  r0, r_temp
	ldr  r1, =_log_f
	ldrb r0, [r1, r0]
	orrs  r_af, r0
	adds  r_af, #HF
	movs  r0, #(F3|F5)
	ands  r0, r_temp
	orrs  r_af, r0		// note this OR is safe because 35 from log_f[r_temp&mask] are <=
	bx   lr

opli_r35_58:
	 // this is the regular version of the inner bit code - it uses r_temp for F3 & F5
	preserve_only_flags r0, CF
	movs  r0, #0x08
	ands  r0, r_temp
	ldr  r1, =_log_f
	ldrb r0, [r1, r0]
	orrs  r_af, r0
	adds  r_af, #HF
	movs  r0, #(F3|F5)
	ands  r0, r_temp
	orrs  r_af, r0		// note this OR is safe because 35 from log_f[r_temp&mask] are <=
	bx   lr

opli_r35_60:
	 // this is the regular version of the inner bit code - it uses r_temp for F3 & F5
	preserve_only_flags r0, CF
	movs  r0, #0x10
	ands  r0, r_temp
	ldr  r1, =_log_f
	ldrb r0, [r1, r0]
	orrs  r_af, r0
	adds  r_af, #HF
	movs  r0, #(F3|F5)
	ands  r0, r_temp
	orrs  r_af, r0		// note this OR is safe because 35 from log_f[r_temp&mask] are <=
	bx   lr

opli_r35_68:
	 // this is the regular version of the inner bit code - it uses r_temp for F3 & F5
	preserve_only_flags r0, CF
	movs  r0, #0x20
	ands  r0, r_temp
	ldr  r1, =_log_f
	ldrb r0, [r1, r0]
	orrs  r_af, r0
	adds  r_af, #HF
	movs  r0, #(F3|F5)
	ands  r0, r_temp
	orrs  r_af, r0		// note this OR is safe because 35 from log_f[r_temp&mask] are <=
	bx   lr

opli_r35_70:
	 // this is the regular version of the inner bit code - it uses r_temp for F3 & F5
	preserve_only_flags r0, CF
	movs  r0, #0x40
	ands  r0, r_temp
	ldr  r1, =_log_f
	ldrb r0, [r1, r0]
	orrs  r_af, r0
	adds  r_af, #HF
	movs  r0, #(F3|F5)
	ands  r0, r_temp
	orrs  r_af, r0		// note this OR is safe because 35 from log_f[r_temp&mask] are <=
	bx   lr

opli_r35_78:
	 // this is the regular version of the inner bit code - it uses r_temp for F3 & F5
	preserve_only_flags r0, CF
	movs  r0, #0x80
	ands  r0, r_temp
	ldr  r1, =_log_f
	ldrb r0, [r1, r0]
	orrs  r_af, r0
	adds  r_af, #HF
	movs  r0, #(F3|F5)
	ands  r0, r_temp
	orrs  r_af, r0		// note this OR is safe because 35 from log_f[r_temp&mask] are <=
	bx   lr

opli_r35_80:
	movs  r0, #0x01
	bics  r_temp, r0
	bx   lr

opli_r35_88:
	movs  r0, #0x02
	bics  r_temp, r0
	bx   lr

opli_r35_90:
	movs  r0, #0x04
	bics  r_temp, r0
	bx   lr

opli_r35_98:
	movs  r0, #0x08
	bics  r_temp, r0
	bx   lr

opli_r35_a0:
	movs  r0, #0x10
	bics  r_temp, r0
	bx   lr

opli_r35_a8:
	movs  r0, #0x20
	bics  r_temp, r0
	bx   lr

opli_r35_b0:
	movs  r0, #0x40
	bics  r_temp, r0
	bx   lr

opli_r35_b8:
	movs  r0, #0x80
	bics  r_temp, r0
	bx   lr

opli_r35_c0:
	movs  r0, #0x01
	orrs  r_temp, r0
	bx   lr

opli_r35_c8:
	movs  r0, #0x02
	orrs  r_temp, r0
	bx   lr

opli_r35_d0:
	movs  r0, #0x04
	orrs  r_temp, r0
	bx   lr

opli_r35_d8:
	movs  r0, #0x08
	orrs  r_temp, r0
	bx   lr

opli_r35_e0:
	movs  r0, #0x10
	orrs  r_temp, r0
	bx   lr

opli_r35_e8:
	movs  r0, #0x20
	orrs  r_temp, r0
	bx   lr

opli_r35_f0:
	movs  r0, #0x40
	orrs  r_temp, r0
	bx   lr

opli_r35_f8:
	movs  r0, #0x80
	orrs  r_temp, r0
	bx   lr

.ltorg
// === END OPL inner logic functions which do core work on r_temp

// === BEGIN OPL inner logic functions which do core work on r_temp, but set F3&F5 based on mem_h
opli_m35_table:
.short opli_r35_00 + 1 - opli_m35_table
.short opli_r35_08 + 1 - opli_m35_table
.short opli_r35_10 + 1 - opli_m35_table
.short opli_r35_18 + 1 - opli_m35_table
.short opli_r35_20 + 1 - opli_m35_table
.short opli_r35_28 + 1 - opli_m35_table
.short opli_r35_30 + 1 - opli_m35_table
.short opli_r35_38 + 1 - opli_m35_table
.short opli_m35_40 + 1 - opli_m35_table
.short opli_m35_48 + 1 - opli_m35_table
.short opli_m35_50 + 1 - opli_m35_table
.short opli_m35_58 + 1 - opli_m35_table
.short opli_m35_60 + 1 - opli_m35_table
.short opli_m35_68 + 1 - opli_m35_table
.short opli_m35_70 + 1 - opli_m35_table
.short opli_m35_78 + 1 - opli_m35_table
.short opli_r35_80 + 1 - opli_m35_table
.short opli_r35_88 + 1 - opli_m35_table
.short opli_r35_90 + 1 - opli_m35_table
.short opli_r35_98 + 1 - opli_m35_table
.short opli_r35_a0 + 1 - opli_m35_table
.short opli_r35_a8 + 1 - opli_m35_table
.short opli_r35_b0 + 1 - opli_m35_table
.short opli_r35_b8 + 1 - opli_m35_table
.short opli_r35_c0 + 1 - opli_m35_table
.short opli_r35_c8 + 1 - opli_m35_table
.short opli_r35_d0 + 1 - opli_m35_table
.short opli_r35_d8 + 1 - opli_m35_table
.short opli_r35_e0 + 1 - opli_m35_table
.short opli_r35_e8 + 1 - opli_m35_table
.short opli_r35_f0 + 1 - opli_m35_table
.short opli_r35_f8 + 1 - opli_m35_table
opli_m35_40:
	 // Beware confusion; t may already be updated for the instruction
	 // this is the bitmem version of the inner bit code - it uses mem_h for F3 & F5
	preserve_only_flags r0, CF
	movs  r0, #0x01
	ands  r0, r_temp
	ldr  r1, =_log_f
	ldrb r0, [r1, r0]
	orrs  r_af, r0
	adds  r_af, #HF
	movs  r1, #(F3|F5)
	bics  r_af, r1
	mov  r0, r_memptr
	lsrs  r0, #8
	ands  r0, r1
	orrs  r_af, r0
	bx   lr

opli_m35_48:
	 // Beware confusion; t may already be updated for the instruction
	 // this is the bitmem version of the inner bit code - it uses mem_h for F3 & F5
	preserve_only_flags r0, CF
	movs  r0, #0x02
	ands  r0, r_temp
	ldr  r1, =_log_f
	ldrb r0, [r1, r0]
	orrs  r_af, r0
	adds  r_af, #HF
	movs  r1, #(F3|F5)
	bics  r_af, r1
	mov  r0, r_memptr
	lsrs  r0, #8
	ands  r0, r1
	orrs  r_af, r0
	bx   lr

opli_m35_50:
	 // Beware confusion; t may already be updated for the instruction
	 // this is the bitmem version of the inner bit code - it uses mem_h for F3 & F5
	preserve_only_flags r0, CF
	movs  r0, #0x04
	ands  r0, r_temp
	ldr  r1, =_log_f
	ldrb r0, [r1, r0]
	orrs  r_af, r0
	adds  r_af, #HF
	movs  r1, #(F3|F5)
	bics  r_af, r1
	mov  r0, r_memptr
	lsrs  r0, #8
	ands  r0, r1
	orrs  r_af, r0
	bx   lr

opli_m35_58:
	 // Beware confusion; t may already be updated for the instruction
	 // this is the bitmem version of the inner bit code - it uses mem_h for F3 & F5
	preserve_only_flags r0, CF
	movs  r0, #0x08
	ands  r0, r_temp
	ldr  r1, =_log_f
	ldrb r0, [r1, r0]
	orrs  r_af, r0
	adds  r_af, #HF
	movs  r1, #(F3|F5)
	bics  r_af, r1
	mov  r0, r_memptr
	lsrs  r0, #8
	ands  r0, r1
	orrs  r_af, r0
	bx   lr

opli_m35_60:
	 // Beware confusion; t may already be updated for the instruction
	 // this is the bitmem version of the inner bit code - it uses mem_h for F3 & F5
	preserve_only_flags r0, CF
	movs  r0, #0x10
	ands  r0, r_temp
	ldr  r1, =_log_f
	ldrb r0, [r1, r0]
	orrs  r_af, r0
	adds  r_af, #HF
	movs  r1, #(F3|F5)
	bics  r_af, r1
	mov  r0, r_memptr
	lsrs  r0, #8
	ands  r0, r1
	orrs  r_af, r0
	bx   lr

opli_m35_68:
	 // Beware confusion; t may already be updated for the instruction
	 // this is the bitmem version of the inner bit code - it uses mem_h for F3 & F5
	preserve_only_flags r0, CF
	movs  r0, #0x20
	ands  r0, r_temp
	ldr  r1, =_log_f
	ldrb r0, [r1, r0]
	orrs  r_af, r0
	adds  r_af, #HF
	movs  r1, #(F3|F5)
	bics  r_af, r1
	mov  r0, r_memptr
	lsrs  r0, #8
	ands  r0, r1
	orrs  r_af, r0
	bx   lr

opli_m35_70:
	 // Beware confusion; t may already be updated for the instruction
	 // this is the bitmem version of the inner bit code - it uses mem_h for F3 & F5
	preserve_only_flags r0, CF
	movs  r0, #0x40
	ands  r0, r_temp
	ldr  r1, =_log_f
	ldrb r0, [r1, r0]
	orrs  r_af, r0
	adds  r_af, #HF
	movs  r1, #(F3|F5)
	bics  r_af, r1
	mov  r0, r_memptr
	lsrs  r0, #8
	ands  r0, r1
	orrs  r_af, r0
	bx   lr

opli_m35_78:
	 // Beware confusion; t may already be updated for the instruction
	 // this is the bitmem version of the inner bit code - it uses mem_h for F3 & F5
	preserve_only_flags r0, CF
	movs  r0, #0x80
	ands  r0, r_temp
	ldr  r1, =_log_f
	ldrb r0, [r1, r0]
	orrs  r_af, r0
	adds  r_af, #HF
	movs  r1, #(F3|F5)
	bics  r_af, r1
	mov  r0, r_memptr
	lsrs  r0, #8
	ands  r0, r1
	orrs  r_af, r0
	bx   lr

.ltorg
// === END OPL inner logic functions which do core work on r_temp, but set F3&F5 based on mem_h

// === BEGIN cb logic opcodes
opl_table:
.short opl00 + 1 - opl_table
.short opl01 + 1 - opl_table
.short opl02 + 1 - opl_table
.short opl03 + 1 - opl_table
.short opl04 + 1 - opl_table
.short opl05 + 1 - opl_table
.short opl06 + 1 - opl_table
.short opl07 + 1 - opl_table
.short opl08 + 1 - opl_table
.short opl09 + 1 - opl_table
.short opl0a + 1 - opl_table
.short opl0b + 1 - opl_table
.short opl0c + 1 - opl_table
.short opl0d + 1 - opl_table
.short opl0e + 1 - opl_table
.short opl0f + 1 - opl_table
.short opl10 + 1 - opl_table
.short opl11 + 1 - opl_table
.short opl12 + 1 - opl_table
.short opl13 + 1 - opl_table
.short opl14 + 1 - opl_table
.short opl15 + 1 - opl_table
.short opl16 + 1 - opl_table
.short opl17 + 1 - opl_table
.short opl18 + 1 - opl_table
.short opl19 + 1 - opl_table
.short opl1a + 1 - opl_table
.short opl1b + 1 - opl_table
.short opl1c + 1 - opl_table
.short opl1d + 1 - opl_table
.short opl1e + 1 - opl_table
.short opl1f + 1 - opl_table
.short opl20 + 1 - opl_table
.short opl21 + 1 - opl_table
.short opl22 + 1 - opl_table
.short opl23 + 1 - opl_table
.short opl24 + 1 - opl_table
.short opl25 + 1 - opl_table
.short opl26 + 1 - opl_table
.short opl27 + 1 - opl_table
.short opl28 + 1 - opl_table
.short opl29 + 1 - opl_table
.short opl2a + 1 - opl_table
.short opl2b + 1 - opl_table
.short opl2c + 1 - opl_table
.short opl2d + 1 - opl_table
.short opl2e + 1 - opl_table
.short opl2f + 1 - opl_table
.short opl30 + 1 - opl_table
.short opl31 + 1 - opl_table
.short opl32 + 1 - opl_table
.short opl33 + 1 - opl_table
.short opl34 + 1 - opl_table
.short opl35 + 1 - opl_table
.short opl36 + 1 - opl_table
.short opl37 + 1 - opl_table
.short opl38 + 1 - opl_table
.short opl39 + 1 - opl_table
.short opl3a + 1 - opl_table
.short opl3b + 1 - opl_table
.short opl3c + 1 - opl_table
.short opl3d + 1 - opl_table
.short opl3e + 1 - opl_table
.short opl3f + 1 - opl_table
.short opl40 + 1 - opl_table
.short opl41 + 1 - opl_table
.short opl42 + 1 - opl_table
.short opl43 + 1 - opl_table
.short opl44 + 1 - opl_table
.short opl45 + 1 - opl_table
.short opl46 + 1 - opl_table
.short opl47 + 1 - opl_table
.short opl48 + 1 - opl_table
.short opl49 + 1 - opl_table
.short opl4a + 1 - opl_table
.short opl4b + 1 - opl_table
.short opl4c + 1 - opl_table
.short opl4d + 1 - opl_table
.short opl4e + 1 - opl_table
.short opl4f + 1 - opl_table
.short opl50 + 1 - opl_table
.short opl51 + 1 - opl_table
.short opl52 + 1 - opl_table
.short opl53 + 1 - opl_table
.short opl54 + 1 - opl_table
.short opl55 + 1 - opl_table
.short opl56 + 1 - opl_table
.short opl57 + 1 - opl_table
.short opl58 + 1 - opl_table
.short opl59 + 1 - opl_table
.short opl5a + 1 - opl_table
.short opl5b + 1 - opl_table
.short opl5c + 1 - opl_table
.short opl5d + 1 - opl_table
.short opl5e + 1 - opl_table
.short opl5f + 1 - opl_table
.short opl60 + 1 - opl_table
.short opl61 + 1 - opl_table
.short opl62 + 1 - opl_table
.short opl63 + 1 - opl_table
.short opl64 + 1 - opl_table
.short opl65 + 1 - opl_table
.short opl66 + 1 - opl_table
.short opl67 + 1 - opl_table
.short opl68 + 1 - opl_table
.short opl69 + 1 - opl_table
.short opl6a + 1 - opl_table
.short opl6b + 1 - opl_table
.short opl6c + 1 - opl_table
.short opl6d + 1 - opl_table
.short opl6e + 1 - opl_table
.short opl6f + 1 - opl_table
.short opl70 + 1 - opl_table
.short opl71 + 1 - opl_table
.short opl72 + 1 - opl_table
.short opl73 + 1 - opl_table
.short opl74 + 1 - opl_table
.short opl75 + 1 - opl_table
.short opl76 + 1 - opl_table
.short opl77 + 1 - opl_table
.short opl78 + 1 - opl_table
.short opl79 + 1 - opl_table
.short opl7a + 1 - opl_table
.short opl7b + 1 - opl_table
.short opl7c + 1 - opl_table
.short opl7d + 1 - opl_table
.short opl7e + 1 - opl_table
.short opl7f + 1 - opl_table
.short opl80 + 1 - opl_table
.short opl81 + 1 - opl_table
.short opl82 + 1 - opl_table
.short opl83 + 1 - opl_table
.short opl84 + 1 - opl_table
.short opl85 + 1 - opl_table
.short opl86 + 1 - opl_table
.short opl87 + 1 - opl_table
.short opl88 + 1 - opl_table
.short opl89 + 1 - opl_table
.short opl8a + 1 - opl_table
.short opl8b + 1 - opl_table
.short opl8c + 1 - opl_table
.short opl8d + 1 - opl_table
.short opl8e + 1 - opl_table
.short opl8f + 1 - opl_table
.short opl90 + 1 - opl_table
.short opl91 + 1 - opl_table
.short opl92 + 1 - opl_table
.short opl93 + 1 - opl_table
.short opl94 + 1 - opl_table
.short opl95 + 1 - opl_table
.short opl96 + 1 - opl_table
.short opl97 + 1 - opl_table
.short opl98 + 1 - opl_table
.short opl99 + 1 - opl_table
.short opl9a + 1 - opl_table
.short opl9b + 1 - opl_table
.short opl9c + 1 - opl_table
.short opl9d + 1 - opl_table
.short opl9e + 1 - opl_table
.short opl9f + 1 - opl_table
.short opla0 + 1 - opl_table
.short opla1 + 1 - opl_table
.short opla2 + 1 - opl_table
.short opla3 + 1 - opl_table
.short opla4 + 1 - opl_table
.short opla5 + 1 - opl_table
.short opla6 + 1 - opl_table
.short opla7 + 1 - opl_table
.short opla8 + 1 - opl_table
.short opla9 + 1 - opl_table
.short oplaa + 1 - opl_table
.short oplab + 1 - opl_table
.short oplac + 1 - opl_table
.short oplad + 1 - opl_table
.short oplae + 1 - opl_table
.short oplaf + 1 - opl_table
.short oplb0 + 1 - opl_table
.short oplb1 + 1 - opl_table
.short oplb2 + 1 - opl_table
.short oplb3 + 1 - opl_table
.short oplb4 + 1 - opl_table
.short oplb5 + 1 - opl_table
.short oplb6 + 1 - opl_table
.short oplb7 + 1 - opl_table
.short oplb8 + 1 - opl_table
.short oplb9 + 1 - opl_table
.short oplba + 1 - opl_table
.short oplbb + 1 - opl_table
.short oplbc + 1 - opl_table
.short oplbd + 1 - opl_table
.short oplbe + 1 - opl_table
.short oplbf + 1 - opl_table
.short oplc0 + 1 - opl_table
.short oplc1 + 1 - opl_table
.short oplc2 + 1 - opl_table
.short oplc3 + 1 - opl_table
.short oplc4 + 1 - opl_table
.short oplc5 + 1 - opl_table
.short oplc6 + 1 - opl_table
.short oplc7 + 1 - opl_table
.short oplc8 + 1 - opl_table
.short oplc9 + 1 - opl_table
.short oplca + 1 - opl_table
.short oplcb + 1 - opl_table
.short oplcc + 1 - opl_table
.short oplcd + 1 - opl_table
.short oplce + 1 - opl_table
.short oplcf + 1 - opl_table
.short opld0 + 1 - opl_table
.short opld1 + 1 - opl_table
.short opld2 + 1 - opl_table
.short opld3 + 1 - opl_table
.short opld4 + 1 - opl_table
.short opld5 + 1 - opl_table
.short opld6 + 1 - opl_table
.short opld7 + 1 - opl_table
.short opld8 + 1 - opl_table
.short opld9 + 1 - opl_table
.short oplda + 1 - opl_table
.short opldb + 1 - opl_table
.short opldc + 1 - opl_table
.short opldd + 1 - opl_table
.short oplde + 1 - opl_table
.short opldf + 1 - opl_table
.short ople0 + 1 - opl_table
.short ople1 + 1 - opl_table
.short ople2 + 1 - opl_table
.short ople3 + 1 - opl_table
.short ople4 + 1 - opl_table
.short ople5 + 1 - opl_table
.short ople6 + 1 - opl_table
.short ople7 + 1 - opl_table
.short ople8 + 1 - opl_table
.short ople9 + 1 - opl_table
.short oplea + 1 - opl_table
.short opleb + 1 - opl_table
.short oplec + 1 - opl_table
.short opled + 1 - opl_table
.short oplee + 1 - opl_table
.short oplef + 1 - opl_table
.short oplf0 + 1 - opl_table
.short oplf1 + 1 - opl_table
.short oplf2 + 1 - opl_table
.short oplf3 + 1 - opl_table
.short oplf4 + 1 - opl_table
.short oplf5 + 1 - opl_table
.short oplf6 + 1 - opl_table
.short oplf7 + 1 - opl_table
.short oplf8 + 1 - opl_table
.short oplf9 + 1 - opl_table
.short oplfa + 1 - opl_table
.short oplfb + 1 - opl_table
.short oplfc + 1 - opl_table
.short oplfd + 1 - opl_table
.short oplfe + 1 - opl_table
.short oplff + 1 - opl_table
opl00:
	mov  r0, r_bc
	lsrs  r0, #8
	push {lr}
	bl   rlc8
	lsls  r0, #8
	mov  r1, r_bc
	uxtb r1, r1
	orrs  r0, r1
	mov  r_bc, r0
	pop  {pc}

opl01:
	mov  r0, r_bc
	uxtb r0, r0
	push {lr}
	bl   rlc8
	mov  r1, r_bc
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r0
	mov  r_bc, r1
	pop  {pc}

opl02:
	mov  r0, r_de
	lsrs  r0, #8
	push {lr}
	bl   rlc8
	lsls  r0, #8
	mov  r1, r_de
	uxtb r1, r1
	orrs  r0, r1
	mov  r_de, r0
	pop  {pc}

opl03:
	mov  r0, r_de
	uxtb r0, r0
	push {lr}
	bl   rlc8
	mov  r1, r_de
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r0
	mov  r_de, r1
	pop  {pc}

opl04:
	mov  r0, r_hl
	lsrs  r0, #8
	push {lr}
	bl   rlc8
	lsls  r0, #8
	mov  r1, r_hl
	uxtb r1, r1
	orrs  r0, r1
	mov  r_hl, r0
	pop  {pc}

opl05:
	mov  r0, r_hl
	uxtb r0, r0
	push {lr}
	bl   rlc8
	mov  r1, r_hl
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r0
	mov  r_hl, r1
	pop  {pc}

opl06:
	mov  r0, r_hl
	read8_internal r0
	mov  r_temp, r0		// fine to overwrite hi in r_temp
	uxtb r0, r_temp
	push {lr}
	bl   rlc8
	mov  r_temp, r0		// fine to overwrite hi in r_temp
	mov  r0, r_temp		// high half of word is ignored later
	mov  r1, r_hl
	bl   write8
	adds  r_t, #7
	pop  {pc}

opl07:
	lsrs  r0, r_af, #8
	push {lr}
	bl   rlc8
	lsls  r0, #8
	uxtb r1, r_af
	orrs  r0, r1
	mov  r_af, r0
	pop  {pc}

opl08:
	mov  r0, r_bc
	lsrs  r0, #8
	push {lr}
	bl   rrc8
	lsls  r0, #8
	mov  r1, r_bc
	uxtb r1, r1
	orrs  r0, r1
	mov  r_bc, r0
	pop  {pc}

opl09:
	mov  r0, r_bc
	uxtb r0, r0
	push {lr}
	bl   rrc8
	mov  r1, r_bc
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r0
	mov  r_bc, r1
	pop  {pc}

opl0a:
	mov  r0, r_de
	lsrs  r0, #8
	push {lr}
	bl   rrc8
	lsls  r0, #8
	mov  r1, r_de
	uxtb r1, r1
	orrs  r0, r1
	mov  r_de, r0
	pop  {pc}

opl0b:
	mov  r0, r_de
	uxtb r0, r0
	push {lr}
	bl   rrc8
	mov  r1, r_de
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r0
	mov  r_de, r1
	pop  {pc}

opl0c:
	mov  r0, r_hl
	lsrs  r0, #8
	push {lr}
	bl   rrc8
	lsls  r0, #8
	mov  r1, r_hl
	uxtb r1, r1
	orrs  r0, r1
	mov  r_hl, r0
	pop  {pc}

opl0d:
	mov  r0, r_hl
	uxtb r0, r0
	push {lr}
	bl   rrc8
	mov  r1, r_hl
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r0
	mov  r_hl, r1
	pop  {pc}

opl0e:
	mov  r0, r_hl
	read8_internal r0
	mov  r_temp, r0		// fine to overwrite hi in r_temp
	uxtb r0, r_temp
	push {lr}
	bl   rrc8
	mov  r_temp, r0		// fine to overwrite hi in r_temp
	mov  r0, r_temp		// high half of word is ignored later
	mov  r1, r_hl
	bl   write8
	adds  r_t, #7
	pop  {pc}

opl0f:
	lsrs  r0, r_af, #8
	push {lr}
	bl   rrc8
	lsls  r0, #8
	uxtb r1, r_af
	orrs  r0, r1
	mov  r_af, r0
	pop  {pc}

opl10:
	mov  r0, r_bc
	lsrs  r0, #8
	push {lr}
	bl   rl8
	lsls  r0, #8
	mov  r1, r_bc
	uxtb r1, r1
	orrs  r0, r1
	mov  r_bc, r0
	pop  {pc}

opl11:
	mov  r0, r_bc
	uxtb r0, r0
	push {lr}
	bl   rl8
	mov  r1, r_bc
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r0
	mov  r_bc, r1
	pop  {pc}

opl12:
	mov  r0, r_de
	lsrs  r0, #8
	push {lr}
	bl   rl8
	lsls  r0, #8
	mov  r1, r_de
	uxtb r1, r1
	orrs  r0, r1
	mov  r_de, r0
	pop  {pc}

opl13:
	mov  r0, r_de
	uxtb r0, r0
	push {lr}
	bl   rl8
	mov  r1, r_de
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r0
	mov  r_de, r1
	pop  {pc}

opl14:
	mov  r0, r_hl
	lsrs  r0, #8
	push {lr}
	bl   rl8
	lsls  r0, #8
	mov  r1, r_hl
	uxtb r1, r1
	orrs  r0, r1
	mov  r_hl, r0
	pop  {pc}

opl15:
	mov  r0, r_hl
	uxtb r0, r0
	push {lr}
	bl   rl8
	mov  r1, r_hl
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r0
	mov  r_hl, r1
	pop  {pc}

opl16:
	mov  r0, r_hl
	read8_internal r0
	mov  r_temp, r0		// fine to overwrite hi in r_temp
	uxtb r0, r_temp
	push {lr}
	bl   rl8
	mov  r_temp, r0		// fine to overwrite hi in r_temp
	mov  r0, r_temp		// high half of word is ignored later
	mov  r1, r_hl
	bl   write8
	adds  r_t, #7
	pop  {pc}

opl17:
	lsrs  r0, r_af, #8
	push {lr}
	bl   rl8
	lsls  r0, #8
	uxtb r1, r_af
	orrs  r0, r1
	mov  r_af, r0
	pop  {pc}

opl18:
	mov  r0, r_bc
	lsrs  r0, #8
	push {lr}
	bl   rr8
	lsls  r0, #8
	mov  r1, r_bc
	uxtb r1, r1
	orrs  r0, r1
	mov  r_bc, r0
	pop  {pc}

opl19:
	mov  r0, r_bc
	uxtb r0, r0
	push {lr}
	bl   rr8
	mov  r1, r_bc
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r0
	mov  r_bc, r1
	pop  {pc}

opl1a:
	mov  r0, r_de
	lsrs  r0, #8
	push {lr}
	bl   rr8
	lsls  r0, #8
	mov  r1, r_de
	uxtb r1, r1
	orrs  r0, r1
	mov  r_de, r0
	pop  {pc}

opl1b:
	mov  r0, r_de
	uxtb r0, r0
	push {lr}
	bl   rr8
	mov  r1, r_de
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r0
	mov  r_de, r1
	pop  {pc}

opl1c:
	mov  r0, r_hl
	lsrs  r0, #8
	push {lr}
	bl   rr8
	lsls  r0, #8
	mov  r1, r_hl
	uxtb r1, r1
	orrs  r0, r1
	mov  r_hl, r0
	pop  {pc}

opl1d:
	mov  r0, r_hl
	uxtb r0, r0
	push {lr}
	bl   rr8
	mov  r1, r_hl
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r0
	mov  r_hl, r1
	pop  {pc}

opl1e:
	mov  r0, r_hl
	read8_internal r0
	mov  r_temp, r0		// fine to overwrite hi in r_temp
	uxtb r0, r_temp
	push {lr}
	bl   rr8
	mov  r_temp, r0		// fine to overwrite hi in r_temp
	mov  r0, r_temp		// high half of word is ignored later
	mov  r1, r_hl
	bl   write8
	adds  r_t, #7
	pop  {pc}

opl1f:
	lsrs  r0, r_af, #8
	push {lr}
	bl   rr8
	lsls  r0, #8
	uxtb r1, r_af
	orrs  r0, r1
	mov  r_af, r0
	pop  {pc}

opl20:
	mov  r0, r_bc
	lsrs  r0, #8
	push {lr}
	bl   sla8
	lsls  r0, #8
	mov  r1, r_bc
	uxtb r1, r1
	orrs  r0, r1
	mov  r_bc, r0
	pop  {pc}

.ltorg
opl21:
	mov  r0, r_bc
	uxtb r0, r0
	push {lr}
	bl   sla8
	mov  r1, r_bc
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r0
	mov  r_bc, r1
	pop  {pc}

opl22:
	mov  r0, r_de
	lsrs  r0, #8
	push {lr}
	bl   sla8
	lsls  r0, #8
	mov  r1, r_de
	uxtb r1, r1
	orrs  r0, r1
	mov  r_de, r0
	pop  {pc}

opl23:
	mov  r0, r_de
	uxtb r0, r0
	push {lr}
	bl   sla8
	mov  r1, r_de
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r0
	mov  r_de, r1
	pop  {pc}

opl24:
	mov  r0, r_hl
	lsrs  r0, #8
	push {lr}
	bl   sla8
	lsls  r0, #8
	mov  r1, r_hl
	uxtb r1, r1
	orrs  r0, r1
	mov  r_hl, r0
	pop  {pc}

opl25:
	mov  r0, r_hl
	uxtb r0, r0
	push {lr}
	bl   sla8
	mov  r1, r_hl
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r0
	mov  r_hl, r1
	pop  {pc}

opl26:
	mov  r0, r_hl
	read8_internal r0
	mov  r_temp, r0		// fine to overwrite hi in r_temp
	uxtb r0, r_temp
	push {lr}
	bl   sla8
	mov  r_temp, r0		// fine to overwrite hi in r_temp
	mov  r0, r_temp		// high half of word is ignored later
	mov  r1, r_hl
	bl   write8
	adds  r_t, #7
	pop  {pc}

opl27:
	lsrs  r0, r_af, #8
	push {lr}
	bl   sla8
	lsls  r0, #8
	uxtb r1, r_af
	orrs  r0, r1
	mov  r_af, r0
	pop  {pc}

opl28:
	mov  r0, r_bc
	lsrs  r0, #8
	push {lr}
	bl   sra8
	lsls  r0, #8
	mov  r1, r_bc
	uxtb r1, r1
	orrs  r0, r1
	mov  r_bc, r0
	pop  {pc}

opl29:
	mov  r0, r_bc
	uxtb r0, r0
	push {lr}
	bl   sra8
	mov  r1, r_bc
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r0
	mov  r_bc, r1
	pop  {pc}

opl2a:
	mov  r0, r_de
	lsrs  r0, #8
	push {lr}
	bl   sra8
	lsls  r0, #8
	mov  r1, r_de
	uxtb r1, r1
	orrs  r0, r1
	mov  r_de, r0
	pop  {pc}

opl2b:
	mov  r0, r_de
	uxtb r0, r0
	push {lr}
	bl   sra8
	mov  r1, r_de
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r0
	mov  r_de, r1
	pop  {pc}

opl2c:
	mov  r0, r_hl
	lsrs  r0, #8
	push {lr}
	bl   sra8
	lsls  r0, #8
	mov  r1, r_hl
	uxtb r1, r1
	orrs  r0, r1
	mov  r_hl, r0
	pop  {pc}

opl2d:
	mov  r0, r_hl
	uxtb r0, r0
	push {lr}
	bl   sra8
	mov  r1, r_hl
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r0
	mov  r_hl, r1
	pop  {pc}

opl2e:
	mov  r0, r_hl
	read8_internal r0
	mov  r_temp, r0		// fine to overwrite hi in r_temp
	uxtb r0, r_temp
	push {lr}
	bl   sra8
	mov  r_temp, r0		// fine to overwrite hi in r_temp
	mov  r0, r_temp		// high half of word is ignored later
	mov  r1, r_hl
	bl   write8
	adds  r_t, #7
	pop  {pc}

opl2f:
	lsrs  r0, r_af, #8
	push {lr}
	bl   sra8
	lsls  r0, #8
	uxtb r1, r_af
	orrs  r0, r1
	mov  r_af, r0
	pop  {pc}

opl30:
	mov  r0, r_bc
	lsrs  r0, #8
	push {lr}
	bl   sli8
	lsls  r0, #8
	mov  r1, r_bc
	uxtb r1, r1
	orrs  r0, r1
	mov  r_bc, r0
	pop  {pc}

opl31:
	mov  r0, r_bc
	uxtb r0, r0
	push {lr}
	bl   sli8
	mov  r1, r_bc
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r0
	mov  r_bc, r1
	pop  {pc}

opl32:
	mov  r0, r_de
	lsrs  r0, #8
	push {lr}
	bl   sli8
	lsls  r0, #8
	mov  r1, r_de
	uxtb r1, r1
	orrs  r0, r1
	mov  r_de, r0
	pop  {pc}

opl33:
	mov  r0, r_de
	uxtb r0, r0
	push {lr}
	bl   sli8
	mov  r1, r_de
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r0
	mov  r_de, r1
	pop  {pc}

opl34:
	mov  r0, r_hl
	lsrs  r0, #8
	push {lr}
	bl   sli8
	lsls  r0, #8
	mov  r1, r_hl
	uxtb r1, r1
	orrs  r0, r1
	mov  r_hl, r0
	pop  {pc}

opl35:
	mov  r0, r_hl
	uxtb r0, r0
	push {lr}
	bl   sli8
	mov  r1, r_hl
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r0
	mov  r_hl, r1
	pop  {pc}

opl36:
	mov  r0, r_hl
	read8_internal r0
	mov  r_temp, r0		// fine to overwrite hi in r_temp
	uxtb r0, r_temp
	push {lr}
	bl   sli8
	mov  r_temp, r0		// fine to overwrite hi in r_temp
	mov  r0, r_temp		// high half of word is ignored later
	mov  r1, r_hl
	bl   write8
	adds  r_t, #7
	pop  {pc}

opl37:
	lsrs  r0, r_af, #8
	push {lr}
	bl   sli8
	lsls  r0, #8
	uxtb r1, r_af
	orrs  r0, r1
	mov  r_af, r0
	pop  {pc}

opl38:
	mov  r0, r_bc
	lsrs  r0, #8
	push {lr}
	bl   srl8
	lsls  r0, #8
	mov  r1, r_bc
	uxtb r1, r1
	orrs  r0, r1
	mov  r_bc, r0
	pop  {pc}

opl39:
	mov  r0, r_bc
	uxtb r0, r0
	push {lr}
	bl   srl8
	mov  r1, r_bc
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r0
	mov  r_bc, r1
	pop  {pc}

opl3a:
	mov  r0, r_de
	lsrs  r0, #8
	push {lr}
	bl   srl8
	lsls  r0, #8
	mov  r1, r_de
	uxtb r1, r1
	orrs  r0, r1
	mov  r_de, r0
	pop  {pc}

opl3b:
	mov  r0, r_de
	uxtb r0, r0
	push {lr}
	bl   srl8
	mov  r1, r_de
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r0
	mov  r_de, r1
	pop  {pc}

opl3c:
	mov  r0, r_hl
	lsrs  r0, #8
	push {lr}
	bl   srl8
	lsls  r0, #8
	mov  r1, r_hl
	uxtb r1, r1
	orrs  r0, r1
	mov  r_hl, r0
	pop  {pc}

opl3d:
	mov  r0, r_hl
	uxtb r0, r0
	push {lr}
	bl   srl8
	mov  r1, r_hl
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r0
	mov  r_hl, r1
	pop  {pc}

opl3e:
	mov  r0, r_hl
	read8_internal r0
	mov  r_temp, r0		// fine to overwrite hi in r_temp
	uxtb r0, r_temp
	push {lr}
	bl   srl8
	mov  r_temp, r0		// fine to overwrite hi in r_temp
	mov  r0, r_temp		// high half of word is ignored later
	mov  r1, r_hl
	bl   write8
	adds  r_t, #7
	pop  {pc}

opl3f:
	lsrs  r0, r_af, #8
	push {lr}
	bl   srl8
	lsls  r0, #8
	uxtb r1, r_af
	orrs  r0, r1
	mov  r_af, r0
	pop  {pc}

opl40:
	mov  r_temp, r_bc
	lsrs  r_temp, #8
	push {lr}
	bl   opli_r35_40
	lsls  r0, r_temp, #8
	mov  r1, r_bc
	uxtb r1, r1
	orrs  r0, r1
	mov  r_bc, r0
	pop  {pc}

.ltorg
opl41:
	mov  r_temp, r_bc
	uxtb r3, r3
	push {lr}
	bl   opli_r35_40
	mov  r1, r_bc
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r_temp
	mov  r_bc, r1
	pop  {pc}

opl42:
	mov  r_temp, r_de
	lsrs  r_temp, #8
	push {lr}
	bl   opli_r35_40
	lsls  r0, r_temp, #8
	mov  r1, r_de
	uxtb r1, r1
	orrs  r0, r1
	mov  r_de, r0
	pop  {pc}

opl43:
	mov  r_temp, r_de
	uxtb r3, r3
	push {lr}
	bl   opli_r35_40
	mov  r1, r_de
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r_temp
	mov  r_de, r1
	pop  {pc}

opl44:
	mov  r_temp, r_hl
	lsrs  r_temp, #8
	push {lr}
	bl   opli_r35_40
	lsls  r0, r_temp, #8
	mov  r1, r_hl
	uxtb r1, r1
	orrs  r0, r1
	mov  r_hl, r0
	pop  {pc}

opl45:
	mov  r_temp, r_hl
	uxtb r3, r3
	push {lr}
	bl   opli_r35_40
	mov  r1, r_hl
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r_temp
	mov  r_hl, r1
	pop  {pc}

opl46:
	mov  r0, r_hl
	read8_internal r0
	mov  r_temp, r0
	push {lr}
	bl   opli_m35_40
	adds  r_t, #4
	pop  {pc}

opl47:
	lsrs  r_temp, r_af, #8
	push {lr}
	bl   opli_r35_40
	lsls  r0, r_temp, #8
	uxtb r1, r_af
	orrs  r0, r1
	mov  r_af, r0
	pop  {pc}

opl48:
	mov  r_temp, r_bc
	lsrs  r_temp, #8
	push {lr}
	bl   opli_r35_48
	lsls  r0, r_temp, #8
	mov  r1, r_bc
	uxtb r1, r1
	orrs  r0, r1
	mov  r_bc, r0
	pop  {pc}

opl49:
	mov  r_temp, r_bc
	uxtb r3, r3
	push {lr}
	bl   opli_r35_48
	mov  r1, r_bc
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r_temp
	mov  r_bc, r1
	pop  {pc}

opl4a:
	mov  r_temp, r_de
	lsrs  r_temp, #8
	push {lr}
	bl   opli_r35_48
	lsls  r0, r_temp, #8
	mov  r1, r_de
	uxtb r1, r1
	orrs  r0, r1
	mov  r_de, r0
	pop  {pc}

opl4b:
	mov  r_temp, r_de
	uxtb r3, r3
	push {lr}
	bl   opli_r35_48
	mov  r1, r_de
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r_temp
	mov  r_de, r1
	pop  {pc}

opl4c:
	mov  r_temp, r_hl
	lsrs  r_temp, #8
	push {lr}
	bl   opli_r35_48
	lsls  r0, r_temp, #8
	mov  r1, r_hl
	uxtb r1, r1
	orrs  r0, r1
	mov  r_hl, r0
	pop  {pc}

opl4d:
	mov  r_temp, r_hl
	uxtb r3, r3
	push {lr}
	bl   opli_r35_48
	mov  r1, r_hl
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r_temp
	mov  r_hl, r1
	pop  {pc}

opl4e:
	mov  r0, r_hl
	read8_internal r0
	mov  r_temp, r0
	push {lr}
	bl   opli_m35_48
	adds  r_t, #4
	pop  {pc}

opl4f:
	lsrs  r_temp, r_af, #8
	push {lr}
	bl   opli_r35_48
	lsls  r0, r_temp, #8
	uxtb r1, r_af
	orrs  r0, r1
	mov  r_af, r0
	pop  {pc}

opl50:
	mov  r_temp, r_bc
	lsrs  r_temp, #8
	push {lr}
	bl   opli_r35_50
	lsls  r0, r_temp, #8
	mov  r1, r_bc
	uxtb r1, r1
	orrs  r0, r1
	mov  r_bc, r0
	pop  {pc}

opl51:
	mov  r_temp, r_bc
	uxtb r3, r3
	push {lr}
	bl   opli_r35_50
	mov  r1, r_bc
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r_temp
	mov  r_bc, r1
	pop  {pc}

opl52:
	mov  r_temp, r_de
	lsrs  r_temp, #8
	push {lr}
	bl   opli_r35_50
	lsls  r0, r_temp, #8
	mov  r1, r_de
	uxtb r1, r1
	orrs  r0, r1
	mov  r_de, r0
	pop  {pc}

opl53:
	mov  r_temp, r_de
	uxtb r3, r3
	push {lr}
	bl   opli_r35_50
	mov  r1, r_de
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r_temp
	mov  r_de, r1
	pop  {pc}

opl54:
	mov  r_temp, r_hl
	lsrs  r_temp, #8
	push {lr}
	bl   opli_r35_50
	lsls  r0, r_temp, #8
	mov  r1, r_hl
	uxtb r1, r1
	orrs  r0, r1
	mov  r_hl, r0
	pop  {pc}

opl55:
	mov  r_temp, r_hl
	uxtb r3, r3
	push {lr}
	bl   opli_r35_50
	mov  r1, r_hl
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r_temp
	mov  r_hl, r1
	pop  {pc}

opl56:
	mov  r0, r_hl
	read8_internal r0
	mov  r_temp, r0
	push {lr}
	bl   opli_m35_50
	adds  r_t, #4
	pop  {pc}

opl57:
	lsrs  r_temp, r_af, #8
	push {lr}
	bl   opli_r35_50
	lsls  r0, r_temp, #8
	uxtb r1, r_af
	orrs  r0, r1
	mov  r_af, r0
	pop  {pc}

opl58:
	mov  r_temp, r_bc
	lsrs  r_temp, #8
	push {lr}
	bl   opli_r35_58
	lsls  r0, r_temp, #8
	mov  r1, r_bc
	uxtb r1, r1
	orrs  r0, r1
	mov  r_bc, r0
	pop  {pc}

opl59:
	mov  r_temp, r_bc
	uxtb r3, r3
	push {lr}
	bl   opli_r35_58
	mov  r1, r_bc
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r_temp
	mov  r_bc, r1
	pop  {pc}

opl5a:
	mov  r_temp, r_de
	lsrs  r_temp, #8
	push {lr}
	bl   opli_r35_58
	lsls  r0, r_temp, #8
	mov  r1, r_de
	uxtb r1, r1
	orrs  r0, r1
	mov  r_de, r0
	pop  {pc}

opl5b:
	mov  r_temp, r_de
	uxtb r3, r3
	push {lr}
	bl   opli_r35_58
	mov  r1, r_de
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r_temp
	mov  r_de, r1
	pop  {pc}

opl5c:
	mov  r_temp, r_hl
	lsrs  r_temp, #8
	push {lr}
	bl   opli_r35_58
	lsls  r0, r_temp, #8
	mov  r1, r_hl
	uxtb r1, r1
	orrs  r0, r1
	mov  r_hl, r0
	pop  {pc}

opl5d:
	mov  r_temp, r_hl
	uxtb r3, r3
	push {lr}
	bl   opli_r35_58
	mov  r1, r_hl
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r_temp
	mov  r_hl, r1
	pop  {pc}

opl5e:
	mov  r0, r_hl
	read8_internal r0
	mov  r_temp, r0
	push {lr}
	bl   opli_m35_58
	adds  r_t, #4
	pop  {pc}

opl5f:
	lsrs  r_temp, r_af, #8
	push {lr}
	bl   opli_r35_58
	lsls  r0, r_temp, #8
	uxtb r1, r_af
	orrs  r0, r1
	mov  r_af, r0
	pop  {pc}

opl60:
	mov  r_temp, r_bc
	lsrs  r_temp, #8
	push {lr}
	bl   opli_r35_60
	lsls  r0, r_temp, #8
	mov  r1, r_bc
	uxtb r1, r1
	orrs  r0, r1
	mov  r_bc, r0
	pop  {pc}

.ltorg
opl61:
	mov  r_temp, r_bc
	uxtb r3, r3
	push {lr}
	bl   opli_r35_60
	mov  r1, r_bc
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r_temp
	mov  r_bc, r1
	pop  {pc}

opl62:
	mov  r_temp, r_de
	lsrs  r_temp, #8
	push {lr}
	bl   opli_r35_60
	lsls  r0, r_temp, #8
	mov  r1, r_de
	uxtb r1, r1
	orrs  r0, r1
	mov  r_de, r0
	pop  {pc}

opl63:
	mov  r_temp, r_de
	uxtb r3, r3
	push {lr}
	bl   opli_r35_60
	mov  r1, r_de
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r_temp
	mov  r_de, r1
	pop  {pc}

opl64:
	mov  r_temp, r_hl
	lsrs  r_temp, #8
	push {lr}
	bl   opli_r35_60
	lsls  r0, r_temp, #8
	mov  r1, r_hl
	uxtb r1, r1
	orrs  r0, r1
	mov  r_hl, r0
	pop  {pc}

opl65:
	mov  r_temp, r_hl
	uxtb r3, r3
	push {lr}
	bl   opli_r35_60
	mov  r1, r_hl
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r_temp
	mov  r_hl, r1
	pop  {pc}

opl66:
	mov  r0, r_hl
	read8_internal r0
	mov  r_temp, r0
	push {lr}
	bl   opli_m35_60
	adds  r_t, #4
	pop  {pc}

opl67:
	lsrs  r_temp, r_af, #8
	push {lr}
	bl   opli_r35_60
	lsls  r0, r_temp, #8
	uxtb r1, r_af
	orrs  r0, r1
	mov  r_af, r0
	pop  {pc}

opl68:
	mov  r_temp, r_bc
	lsrs  r_temp, #8
	push {lr}
	bl   opli_r35_68
	lsls  r0, r_temp, #8
	mov  r1, r_bc
	uxtb r1, r1
	orrs  r0, r1
	mov  r_bc, r0
	pop  {pc}

opl69:
	mov  r_temp, r_bc
	uxtb r3, r3
	push {lr}
	bl   opli_r35_68
	mov  r1, r_bc
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r_temp
	mov  r_bc, r1
	pop  {pc}

opl6a:
	mov  r_temp, r_de
	lsrs  r_temp, #8
	push {lr}
	bl   opli_r35_68
	lsls  r0, r_temp, #8
	mov  r1, r_de
	uxtb r1, r1
	orrs  r0, r1
	mov  r_de, r0
	pop  {pc}

opl6b:
	mov  r_temp, r_de
	uxtb r3, r3
	push {lr}
	bl   opli_r35_68
	mov  r1, r_de
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r_temp
	mov  r_de, r1
	pop  {pc}

opl6c:
	mov  r_temp, r_hl
	lsrs  r_temp, #8
	push {lr}
	bl   opli_r35_68
	lsls  r0, r_temp, #8
	mov  r1, r_hl
	uxtb r1, r1
	orrs  r0, r1
	mov  r_hl, r0
	pop  {pc}

opl6d:
	mov  r_temp, r_hl
	uxtb r3, r3
	push {lr}
	bl   opli_r35_68
	mov  r1, r_hl
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r_temp
	mov  r_hl, r1
	pop  {pc}

opl6e:
	mov  r0, r_hl
	read8_internal r0
	mov  r_temp, r0
	push {lr}
	bl   opli_m35_68
	adds  r_t, #4
	pop  {pc}

opl6f:
	lsrs  r_temp, r_af, #8
	push {lr}
	bl   opli_r35_68
	lsls  r0, r_temp, #8
	uxtb r1, r_af
	orrs  r0, r1
	mov  r_af, r0
	pop  {pc}

opl70:
	mov  r_temp, r_bc
	lsrs  r_temp, #8
	push {lr}
	bl   opli_r35_70
	lsls  r0, r_temp, #8
	mov  r1, r_bc
	uxtb r1, r1
	orrs  r0, r1
	mov  r_bc, r0
	pop  {pc}

opl71:
	mov  r_temp, r_bc
	uxtb r3, r3
	push {lr}
	bl   opli_r35_70
	mov  r1, r_bc
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r_temp
	mov  r_bc, r1
	pop  {pc}

opl72:
	mov  r_temp, r_de
	lsrs  r_temp, #8
	push {lr}
	bl   opli_r35_70
	lsls  r0, r_temp, #8
	mov  r1, r_de
	uxtb r1, r1
	orrs  r0, r1
	mov  r_de, r0
	pop  {pc}

opl73:
	mov  r_temp, r_de
	uxtb r3, r3
	push {lr}
	bl   opli_r35_70
	mov  r1, r_de
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r_temp
	mov  r_de, r1
	pop  {pc}

opl74:
	mov  r_temp, r_hl
	lsrs  r_temp, #8
	push {lr}
	bl   opli_r35_70
	lsls  r0, r_temp, #8
	mov  r1, r_hl
	uxtb r1, r1
	orrs  r0, r1
	mov  r_hl, r0
	pop  {pc}

opl75:
	mov  r_temp, r_hl
	uxtb r3, r3
	push {lr}
	bl   opli_r35_70
	mov  r1, r_hl
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r_temp
	mov  r_hl, r1
	pop  {pc}

opl76:
	mov  r0, r_hl
	read8_internal r0
	mov  r_temp, r0
	push {lr}
	bl   opli_m35_70
	adds  r_t, #4
	pop  {pc}

opl77:
	lsrs  r_temp, r_af, #8
	push {lr}
	bl   opli_r35_70
	lsls  r0, r_temp, #8
	uxtb r1, r_af
	orrs  r0, r1
	mov  r_af, r0
	pop  {pc}

opl78:
	mov  r_temp, r_bc
	lsrs  r_temp, #8
	push {lr}
	bl   opli_r35_78
	lsls  r0, r_temp, #8
	mov  r1, r_bc
	uxtb r1, r1
	orrs  r0, r1
	mov  r_bc, r0
	pop  {pc}

opl79:
	mov  r_temp, r_bc
	uxtb r3, r3
	push {lr}
	bl   opli_r35_78
	mov  r1, r_bc
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r_temp
	mov  r_bc, r1
	pop  {pc}

opl7a:
	mov  r_temp, r_de
	lsrs  r_temp, #8
	push {lr}
	bl   opli_r35_78
	lsls  r0, r_temp, #8
	mov  r1, r_de
	uxtb r1, r1
	orrs  r0, r1
	mov  r_de, r0
	pop  {pc}

opl7b:
	mov  r_temp, r_de
	uxtb r3, r3
	push {lr}
	bl   opli_r35_78
	mov  r1, r_de
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r_temp
	mov  r_de, r1
	pop  {pc}

opl7c:
	mov  r_temp, r_hl
	lsrs  r_temp, #8
	push {lr}
	bl   opli_r35_78
	lsls  r0, r_temp, #8
	mov  r1, r_hl
	uxtb r1, r1
	orrs  r0, r1
	mov  r_hl, r0
	pop  {pc}

opl7d:
	mov  r_temp, r_hl
	uxtb r3, r3
	push {lr}
	bl   opli_r35_78
	mov  r1, r_hl
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r_temp
	mov  r_hl, r1
	pop  {pc}

opl7e:
	mov  r0, r_hl
	read8_internal r0
	mov  r_temp, r0
	push {lr}
	bl   opli_m35_78
	adds  r_t, #4
	pop  {pc}

opl7f:
	lsrs  r_temp, r_af, #8
	push {lr}
	bl   opli_r35_78
	lsls  r0, r_temp, #8
	uxtb r1, r_af
	orrs  r0, r1
	mov  r_af, r0
	pop  {pc}

opl80:
	movs  r0, #1
	lsls  r0, #8
	mov  r1, r_bc
	bics  r1, r0
	mov  r_bc, r1
	bx   lr

.ltorg
opl81:
	movs  r0, #0x01
	mov  r1, r_bc
	bics  r1, r0
	mov  r_bc, r1
	bx   lr

opl82:
	movs  r0, #1
	lsls  r0, #8
	mov  r1, r_de
	bics  r1, r0
	mov  r_de, r1
	bx   lr

opl83:
	movs  r0, #0x01
	mov  r1, r_de
	bics  r1, r0
	mov  r_de, r1
	bx   lr

opl84:
	movs  r0, #1
	lsls  r0, #8
	mov  r1, r_hl
	bics  r1, r0
	mov  r_hl, r1
	bx   lr

opl85:
	movs  r0, #0x01
	mov  r1, r_hl
	bics  r1, r0
	mov  r_hl, r1
	bx   lr

opl86:
	mov  r0, r_hl
	read8_internal r0
	mov  r_temp, r0		// fine to overwrite hi in r_temp
	movs  r0, #0x01
	bics  r_temp, r0
	mov  r0, r_temp		// high half of word is ignored later
	mov  r1, r_hl
	push {lr}
	bl   write8
	adds  r_t, #7
	pop  {pc}

opl87:
	movs  r0, #1
	lsls  r0, #8
	bics  r_af, r0
	bx   lr

opl88:
	movs  r0, #1
	lsls  r0, #9
	mov  r1, r_bc
	bics  r1, r0
	mov  r_bc, r1
	bx   lr

opl89:
	movs  r0, #0x02
	mov  r1, r_bc
	bics  r1, r0
	mov  r_bc, r1
	bx   lr

opl8a:
	movs  r0, #1
	lsls  r0, #9
	mov  r1, r_de
	bics  r1, r0
	mov  r_de, r1
	bx   lr

opl8b:
	movs  r0, #0x02
	mov  r1, r_de
	bics  r1, r0
	mov  r_de, r1
	bx   lr

opl8c:
	movs  r0, #1
	lsls  r0, #9
	mov  r1, r_hl
	bics  r1, r0
	mov  r_hl, r1
	bx   lr

opl8d:
	movs  r0, #0x02
	mov  r1, r_hl
	bics  r1, r0
	mov  r_hl, r1
	bx   lr

opl8e:
	mov  r0, r_hl
	read8_internal r0
	mov  r_temp, r0		// fine to overwrite hi in r_temp
	movs  r0, #0x02
	bics  r_temp, r0
	mov  r0, r_temp		// high half of word is ignored later
	mov  r1, r_hl
	push {lr}
	bl   write8
	adds  r_t, #7
	pop  {pc}

opl8f:
	movs  r0, #1
	lsls  r0, #9
	bics  r_af, r0
	bx   lr

opl90:
	movs  r0, #1
	lsls  r0, #10
	mov  r1, r_bc
	bics  r1, r0
	mov  r_bc, r1
	bx   lr

opl91:
	movs  r0, #0x04
	mov  r1, r_bc
	bics  r1, r0
	mov  r_bc, r1
	bx   lr

opl92:
	movs  r0, #1
	lsls  r0, #10
	mov  r1, r_de
	bics  r1, r0
	mov  r_de, r1
	bx   lr

opl93:
	movs  r0, #0x04
	mov  r1, r_de
	bics  r1, r0
	mov  r_de, r1
	bx   lr

opl94:
	movs  r0, #1
	lsls  r0, #10
	mov  r1, r_hl
	bics  r1, r0
	mov  r_hl, r1
	bx   lr

opl95:
	movs  r0, #0x04
	mov  r1, r_hl
	bics  r1, r0
	mov  r_hl, r1
	bx   lr

opl96:
	mov  r0, r_hl
	read8_internal r0
	mov  r_temp, r0		// fine to overwrite hi in r_temp
	movs  r0, #0x04
	bics  r_temp, r0
	mov  r0, r_temp		// high half of word is ignored later
	mov  r1, r_hl
	push {lr}
	bl   write8
	adds  r_t, #7
	pop  {pc}

opl97:
	movs  r0, #1
	lsls  r0, #10
	bics  r_af, r0
	bx   lr

opl98:
	movs  r0, #1
	lsls  r0, #11
	mov  r1, r_bc
	bics  r1, r0
	mov  r_bc, r1
	bx   lr

opl99:
	movs  r0, #0x08
	mov  r1, r_bc
	bics  r1, r0
	mov  r_bc, r1
	bx   lr

opl9a:
	movs  r0, #1
	lsls  r0, #11
	mov  r1, r_de
	bics  r1, r0
	mov  r_de, r1
	bx   lr

opl9b:
	movs  r0, #0x08
	mov  r1, r_de
	bics  r1, r0
	mov  r_de, r1
	bx   lr

opl9c:
	movs  r0, #1
	lsls  r0, #11
	mov  r1, r_hl
	bics  r1, r0
	mov  r_hl, r1
	bx   lr

opl9d:
	movs  r0, #0x08
	mov  r1, r_hl
	bics  r1, r0
	mov  r_hl, r1
	bx   lr

opl9e:
	mov  r0, r_hl
	read8_internal r0
	mov  r_temp, r0		// fine to overwrite hi in r_temp
	movs  r0, #0x08
	bics  r_temp, r0
	mov  r0, r_temp		// high half of word is ignored later
	mov  r1, r_hl
	push {lr}
	bl   write8
	adds  r_t, #7
	pop  {pc}

opl9f:
	movs  r0, #1
	lsls  r0, #11
	bics  r_af, r0
	bx   lr

opla0:
	movs  r0, #1
	lsls  r0, #12
	mov  r1, r_bc
	bics  r1, r0
	mov  r_bc, r1
	bx   lr

.ltorg
opla1:
	movs  r0, #0x10
	mov  r1, r_bc
	bics  r1, r0
	mov  r_bc, r1
	bx   lr

opla2:
	movs  r0, #1
	lsls  r0, #12
	mov  r1, r_de
	bics  r1, r0
	mov  r_de, r1
	bx   lr

opla3:
	movs  r0, #0x10
	mov  r1, r_de
	bics  r1, r0
	mov  r_de, r1
	bx   lr

opla4:
	movs  r0, #1
	lsls  r0, #12
	mov  r1, r_hl
	bics  r1, r0
	mov  r_hl, r1
	bx   lr

opla5:
	movs  r0, #0x10
	mov  r1, r_hl
	bics  r1, r0
	mov  r_hl, r1
	bx   lr

opla6:
	mov  r0, r_hl
	read8_internal r0
	mov  r_temp, r0		// fine to overwrite hi in r_temp
	movs  r0, #0x10
	bics  r_temp, r0
	mov  r0, r_temp		// high half of word is ignored later
	mov  r1, r_hl
	push {lr}
	bl   write8
	adds  r_t, #7
	pop  {pc}

opla7:
	movs  r0, #1
	lsls  r0, #12
	bics  r_af, r0
	bx   lr

opla8:
	movs  r0, #1
	lsls  r0, #13
	mov  r1, r_bc
	bics  r1, r0
	mov  r_bc, r1
	bx   lr

opla9:
	movs  r0, #0x20
	mov  r1, r_bc
	bics  r1, r0
	mov  r_bc, r1
	bx   lr

oplaa:
	movs  r0, #1
	lsls  r0, #13
	mov  r1, r_de
	bics  r1, r0
	mov  r_de, r1
	bx   lr

oplab:
	movs  r0, #0x20
	mov  r1, r_de
	bics  r1, r0
	mov  r_de, r1
	bx   lr

oplac:
	movs  r0, #1
	lsls  r0, #13
	mov  r1, r_hl
	bics  r1, r0
	mov  r_hl, r1
	bx   lr

oplad:
	movs  r0, #0x20
	mov  r1, r_hl
	bics  r1, r0
	mov  r_hl, r1
	bx   lr

oplae:
	mov  r0, r_hl
	read8_internal r0
	mov  r_temp, r0		// fine to overwrite hi in r_temp
	movs  r0, #0x20
	bics  r_temp, r0
	mov  r0, r_temp		// high half of word is ignored later
	mov  r1, r_hl
	push {lr}
	bl   write8
	adds  r_t, #7
	pop  {pc}

oplaf:
	movs  r0, #1
	lsls  r0, #13
	bics  r_af, r0
	bx   lr

oplb0:
	movs  r0, #1
	lsls  r0, #14
	mov  r1, r_bc
	bics  r1, r0
	mov  r_bc, r1
	bx   lr

oplb1:
	movs  r0, #0x40
	mov  r1, r_bc
	bics  r1, r0
	mov  r_bc, r1
	bx   lr

oplb2:
	movs  r0, #1
	lsls  r0, #14
	mov  r1, r_de
	bics  r1, r0
	mov  r_de, r1
	bx   lr

oplb3:
	movs  r0, #0x40
	mov  r1, r_de
	bics  r1, r0
	mov  r_de, r1
	bx   lr

oplb4:
	movs  r0, #1
	lsls  r0, #14
	mov  r1, r_hl
	bics  r1, r0
	mov  r_hl, r1
	bx   lr

oplb5:
	movs  r0, #0x40
	mov  r1, r_hl
	bics  r1, r0
	mov  r_hl, r1
	bx   lr

oplb6:
	mov  r0, r_hl
	read8_internal r0
	mov  r_temp, r0		// fine to overwrite hi in r_temp
	movs  r0, #0x40
	bics  r_temp, r0
	mov  r0, r_temp		// high half of word is ignored later
	mov  r1, r_hl
	push {lr}
	bl   write8
	adds  r_t, #7
	pop  {pc}

oplb7:
	movs  r0, #1
	lsls  r0, #14
	bics  r_af, r0
	bx   lr

oplb8:
	movs  r0, #1
	lsls  r0, #15
	mov  r1, r_bc
	bics  r1, r0
	mov  r_bc, r1
	bx   lr

oplb9:
	movs  r0, #0x80
	mov  r1, r_bc
	bics  r1, r0
	mov  r_bc, r1
	bx   lr

oplba:
	movs  r0, #1
	lsls  r0, #15
	mov  r1, r_de
	bics  r1, r0
	mov  r_de, r1
	bx   lr

oplbb:
	movs  r0, #0x80
	mov  r1, r_de
	bics  r1, r0
	mov  r_de, r1
	bx   lr

oplbc:
	movs  r0, #1
	lsls  r0, #15
	mov  r1, r_hl
	bics  r1, r0
	mov  r_hl, r1
	bx   lr

oplbd:
	movs  r0, #0x80
	mov  r1, r_hl
	bics  r1, r0
	mov  r_hl, r1
	bx   lr

oplbe:
	mov  r0, r_hl
	read8_internal r0
	mov  r_temp, r0		// fine to overwrite hi in r_temp
	movs  r0, #0x80
	bics  r_temp, r0
	mov  r0, r_temp		// high half of word is ignored later
	mov  r1, r_hl
	push {lr}
	bl   write8
	adds  r_t, #7
	pop  {pc}

oplbf:
	movs  r0, #1
	lsls  r0, #15
	bics  r_af, r0
	bx   lr

oplc0:
	movs  r0, #1
	lsls  r0, #8
	mov  r1, r_bc
	orrs  r1, r0
	mov  r_bc, r1
	bx   lr

.ltorg
oplc1:
	movs  r0, #0x01
	mov  r1, r_bc
	orrs  r1, r0
	mov  r_bc, r1
	bx   lr

oplc2:
	movs  r0, #1
	lsls  r0, #8
	mov  r1, r_de
	orrs  r1, r0
	mov  r_de, r1
	bx   lr

oplc3:
	movs  r0, #0x01
	mov  r1, r_de
	orrs  r1, r0
	mov  r_de, r1
	bx   lr

oplc4:
	movs  r0, #1
	lsls  r0, #8
	mov  r1, r_hl
	orrs  r1, r0
	mov  r_hl, r1
	bx   lr

oplc5:
	movs  r0, #0x01
	mov  r1, r_hl
	orrs  r1, r0
	mov  r_hl, r1
	bx   lr

oplc6:
	mov  r0, r_hl
	read8_internal r0
	mov  r_temp, r0		// fine to overwrite hi in r_temp
	movs  r0, #0x01
	orrs  r_temp, r0
	mov  r0, r_temp		// high half of word is ignored later
	mov  r1, r_hl
	push {lr}
	bl   write8
	adds  r_t, #7
	pop  {pc}

oplc7:
	movs  r0, #1
	lsls  r0, #8
	orrs  r_af, r0
	bx   lr

oplc8:
	movs  r0, #1
	lsls  r0, #9
	mov  r1, r_bc
	orrs  r1, r0
	mov  r_bc, r1
	bx   lr

oplc9:
	movs  r0, #0x02
	mov  r1, r_bc
	orrs  r1, r0
	mov  r_bc, r1
	bx   lr

oplca:
	movs  r0, #1
	lsls  r0, #9
	mov  r1, r_de
	orrs  r1, r0
	mov  r_de, r1
	bx   lr

oplcb:
	movs  r0, #0x02
	mov  r1, r_de
	orrs  r1, r0
	mov  r_de, r1
	bx   lr

oplcc:
	movs  r0, #1
	lsls  r0, #9
	mov  r1, r_hl
	orrs  r1, r0
	mov  r_hl, r1
	bx   lr

oplcd:
	movs  r0, #0x02
	mov  r1, r_hl
	orrs  r1, r0
	mov  r_hl, r1
	bx   lr

oplce:
	mov  r0, r_hl
	read8_internal r0
	mov  r_temp, r0		// fine to overwrite hi in r_temp
	movs  r0, #0x02
	orrs  r_temp, r0
	mov  r0, r_temp		// high half of word is ignored later
	mov  r1, r_hl
	push {lr}
	bl   write8
	adds  r_t, #7
	pop  {pc}

oplcf:
	movs  r0, #1
	lsls  r0, #9
	orrs  r_af, r0
	bx   lr

opld0:
	movs  r0, #1
	lsls  r0, #10
	mov  r1, r_bc
	orrs  r1, r0
	mov  r_bc, r1
	bx   lr

opld1:
	movs  r0, #0x04
	mov  r1, r_bc
	orrs  r1, r0
	mov  r_bc, r1
	bx   lr

opld2:
	movs  r0, #1
	lsls  r0, #10
	mov  r1, r_de
	orrs  r1, r0
	mov  r_de, r1
	bx   lr

opld3:
	movs  r0, #0x04
	mov  r1, r_de
	orrs  r1, r0
	mov  r_de, r1
	bx   lr

opld4:
	movs  r0, #1
	lsls  r0, #10
	mov  r1, r_hl
	orrs  r1, r0
	mov  r_hl, r1
	bx   lr

opld5:
	movs  r0, #0x04
	mov  r1, r_hl
	orrs  r1, r0
	mov  r_hl, r1
	bx   lr

opld6:
	mov  r0, r_hl
	read8_internal r0
	mov  r_temp, r0		// fine to overwrite hi in r_temp
	movs  r0, #0x04
	orrs  r_temp, r0
	mov  r0, r_temp		// high half of word is ignored later
	mov  r1, r_hl
	push {lr}
	bl   write8
	adds  r_t, #7
	pop  {pc}

opld7:
	movs  r0, #1
	lsls  r0, #10
	orrs  r_af, r0
	bx   lr

opld8:
	movs  r0, #1
	lsls  r0, #11
	mov  r1, r_bc
	orrs  r1, r0
	mov  r_bc, r1
	bx   lr

opld9:
	movs  r0, #0x08
	mov  r1, r_bc
	orrs  r1, r0
	mov  r_bc, r1
	bx   lr

oplda:
	movs  r0, #1
	lsls  r0, #11
	mov  r1, r_de
	orrs  r1, r0
	mov  r_de, r1
	bx   lr

opldb:
	movs  r0, #0x08
	mov  r1, r_de
	orrs  r1, r0
	mov  r_de, r1
	bx   lr

opldc:
	movs  r0, #1
	lsls  r0, #11
	mov  r1, r_hl
	orrs  r1, r0
	mov  r_hl, r1
	bx   lr

opldd:
	movs  r0, #0x08
	mov  r1, r_hl
	orrs  r1, r0
	mov  r_hl, r1
	bx   lr

oplde:
	mov  r0, r_hl
	read8_internal r0
	mov  r_temp, r0		// fine to overwrite hi in r_temp
	movs  r0, #0x08
	orrs  r_temp, r0
	mov  r0, r_temp		// high half of word is ignored later
	mov  r1, r_hl
	push {lr}
	bl   write8
	adds  r_t, #7
	pop  {pc}

opldf:
	movs  r0, #1
	lsls  r0, #11
	orrs  r_af, r0
	bx   lr

ople0:
	movs  r0, #1
	lsls  r0, #12
	mov  r1, r_bc
	orrs  r1, r0
	mov  r_bc, r1
	bx   lr

.ltorg
ople1:
	movs  r0, #0x10
	mov  r1, r_bc
	orrs  r1, r0
	mov  r_bc, r1
	bx   lr

ople2:
	movs  r0, #1
	lsls  r0, #12
	mov  r1, r_de
	orrs  r1, r0
	mov  r_de, r1
	bx   lr

ople3:
	movs  r0, #0x10
	mov  r1, r_de
	orrs  r1, r0
	mov  r_de, r1
	bx   lr

ople4:
	movs  r0, #1
	lsls  r0, #12
	mov  r1, r_hl
	orrs  r1, r0
	mov  r_hl, r1
	bx   lr

ople5:
	movs  r0, #0x10
	mov  r1, r_hl
	orrs  r1, r0
	mov  r_hl, r1
	bx   lr

ople6:
	mov  r0, r_hl
	read8_internal r0
	mov  r_temp, r0		// fine to overwrite hi in r_temp
	movs  r0, #0x10
	orrs  r_temp, r0
	mov  r0, r_temp		// high half of word is ignored later
	mov  r1, r_hl
	push {lr}
	bl   write8
	adds  r_t, #7
	pop  {pc}

ople7:
	movs  r0, #1
	lsls  r0, #12
	orrs  r_af, r0
	bx   lr

ople8:
	movs  r0, #1
	lsls  r0, #13
	mov  r1, r_bc
	orrs  r1, r0
	mov  r_bc, r1
	bx   lr

ople9:
	movs  r0, #0x20
	mov  r1, r_bc
	orrs  r1, r0
	mov  r_bc, r1
	bx   lr

oplea:
	movs  r0, #1
	lsls  r0, #13
	mov  r1, r_de
	orrs  r1, r0
	mov  r_de, r1
	bx   lr

opleb:
	movs  r0, #0x20
	mov  r1, r_de
	orrs  r1, r0
	mov  r_de, r1
	bx   lr

oplec:
	movs  r0, #1
	lsls  r0, #13
	mov  r1, r_hl
	orrs  r1, r0
	mov  r_hl, r1
	bx   lr

opled:
	movs  r0, #0x20
	mov  r1, r_hl
	orrs  r1, r0
	mov  r_hl, r1
	bx   lr

oplee:
	mov  r0, r_hl
	read8_internal r0
	mov  r_temp, r0		// fine to overwrite hi in r_temp
	movs  r0, #0x20
	orrs  r_temp, r0
	mov  r0, r_temp		// high half of word is ignored later
	mov  r1, r_hl
	push {lr}
	bl   write8
	adds  r_t, #7
	pop  {pc}

oplef:
	movs  r0, #1
	lsls  r0, #13
	orrs  r_af, r0
	bx   lr

oplf0:
	movs  r0, #1
	lsls  r0, #14
	mov  r1, r_bc
	orrs  r1, r0
	mov  r_bc, r1
	bx   lr

oplf1:
	movs  r0, #0x40
	mov  r1, r_bc
	orrs  r1, r0
	mov  r_bc, r1
	bx   lr

oplf2:
	movs  r0, #1
	lsls  r0, #14
	mov  r1, r_de
	orrs  r1, r0
	mov  r_de, r1
	bx   lr

oplf3:
	movs  r0, #0x40
	mov  r1, r_de
	orrs  r1, r0
	mov  r_de, r1
	bx   lr

oplf4:
	movs  r0, #1
	lsls  r0, #14
	mov  r1, r_hl
	orrs  r1, r0
	mov  r_hl, r1
	bx   lr

oplf5:
	movs  r0, #0x40
	mov  r1, r_hl
	orrs  r1, r0
	mov  r_hl, r1
	bx   lr

oplf6:
	mov  r0, r_hl
	read8_internal r0
	mov  r_temp, r0		// fine to overwrite hi in r_temp
	movs  r0, #0x40
	orrs  r_temp, r0
	mov  r0, r_temp		// high half of word is ignored later
	mov  r1, r_hl
	push {lr}
	bl   write8
	adds  r_t, #7
	pop  {pc}

oplf7:
	movs  r0, #1
	lsls  r0, #14
	orrs  r_af, r0
	bx   lr

oplf8:
	movs  r0, #1
	lsls  r0, #15
	mov  r1, r_bc
	orrs  r1, r0
	mov  r_bc, r1
	bx   lr

oplf9:
	movs  r0, #0x80
	mov  r1, r_bc
	orrs  r1, r0
	mov  r_bc, r1
	bx   lr

oplfa:
	movs  r0, #1
	lsls  r0, #15
	mov  r1, r_de
	orrs  r1, r0
	mov  r_de, r1
	bx   lr

oplfb:
	movs  r0, #0x80
	mov  r1, r_de
	orrs  r1, r0
	mov  r_de, r1
	bx   lr

oplfc:
	movs  r0, #1
	lsls  r0, #15
	mov  r1, r_hl
	orrs  r1, r0
	mov  r_hl, r1
	bx   lr

oplfd:
	movs  r0, #0x80
	mov  r1, r_hl
	orrs  r1, r0
	mov  r_hl, r1
	bx   lr

oplfe:
	mov  r0, r_hl
	read8_internal r0
	mov  r_temp, r0		// fine to overwrite hi in r_temp
	movs  r0, #0x80
	orrs  r_temp, r0
	mov  r0, r_temp		// high half of word is ignored later
	mov  r1, r_hl
	push {lr}
	bl   write8
	adds  r_t, #7
	pop  {pc}

oplff:
	movs  r0, #1
	lsls  r0, #15
	orrs  r_af, r0
	bx   lr

.ltorg
// === END cb logic opcodes

// === BEGIN dd/fd prefix xy opcodes r_temp holds ix or iy
opxy_table:
.short op00 + 1 - opxy_table
.short op01 + 1 - opxy_table
.short op02 + 1 - opxy_table
.short op03 + 1 - opxy_table
.short op04 + 1 - opxy_table
.short op05 + 1 - opxy_table
.short op06 + 1 - opxy_table
.short op07 + 1 - opxy_table
.short op08 + 1 - opxy_table
.short opxy09 + 1 - opxy_table
.short op0a + 1 - opxy_table
.short op0b + 1 - opxy_table
.short op0c + 1 - opxy_table
.short op0d + 1 - opxy_table
.short op0e + 1 - opxy_table
.short op0f + 1 - opxy_table
.short op10 + 1 - opxy_table
.short op11 + 1 - opxy_table
.short op12 + 1 - opxy_table
.short op13 + 1 - opxy_table
.short op14 + 1 - opxy_table
.short op15 + 1 - opxy_table
.short op16 + 1 - opxy_table
.short op17 + 1 - opxy_table
.short op18 + 1 - opxy_table
.short opxy19 + 1 - opxy_table
.short op1a + 1 - opxy_table
.short op1b + 1 - opxy_table
.short op1c + 1 - opxy_table
.short op1d + 1 - opxy_table
.short op1e + 1 - opxy_table
.short op1f + 1 - opxy_table
.short op20 + 1 - opxy_table
.short opxy21 + 1 - opxy_table
.short opxy22 + 1 - opxy_table
.short opxy23 + 1 - opxy_table
.short opxy24 + 1 - opxy_table
.short opxy25 + 1 - opxy_table
.short opxy26 + 1 - opxy_table
.short op27 + 1 - opxy_table
.short op28 + 1 - opxy_table
.short opxy29 + 1 - opxy_table
.short opxy2a + 1 - opxy_table
.short opxy2b + 1 - opxy_table
.short opxy2c + 1 - opxy_table
.short opxy2d + 1 - opxy_table
.short opxy2e + 1 - opxy_table
.short op2f + 1 - opxy_table
.short op30 + 1 - opxy_table
.short op31 + 1 - opxy_table
.short op32 + 1 - opxy_table
.short op33 + 1 - opxy_table
.short opxy34 + 1 - opxy_table
.short opxy35 + 1 - opxy_table
.short opxy36 + 1 - opxy_table
.short op37 + 1 - opxy_table
.short op38 + 1 - opxy_table
.short opxy39 + 1 - opxy_table
.short op3a + 1 - opxy_table
.short op3b + 1 - opxy_table
.short op3c + 1 - opxy_table
.short op3d + 1 - opxy_table
.short op3e + 1 - opxy_table
.short op3f + 1 - opxy_table
.short op40 + 1 - opxy_table
.short op41 + 1 - opxy_table
.short op42 + 1 - opxy_table
.short op43 + 1 - opxy_table
.short opxy44 + 1 - opxy_table
.short opxy45 + 1 - opxy_table
.short opxy46 + 1 - opxy_table
.short op47 + 1 - opxy_table
.short op48 + 1 - opxy_table
.short op49 + 1 - opxy_table
.short op4a + 1 - opxy_table
.short op4b + 1 - opxy_table
.short opxy4c + 1 - opxy_table
.short opxy4d + 1 - opxy_table
.short opxy4e + 1 - opxy_table
.short op4f + 1 - opxy_table
.short op50 + 1 - opxy_table
.short op51 + 1 - opxy_table
.short op52 + 1 - opxy_table
.short op53 + 1 - opxy_table
.short opxy54 + 1 - opxy_table
.short opxy55 + 1 - opxy_table
.short opxy56 + 1 - opxy_table
.short op57 + 1 - opxy_table
.short op58 + 1 - opxy_table
.short op59 + 1 - opxy_table
.short op5a + 1 - opxy_table
.short op5b + 1 - opxy_table
.short opxy5c + 1 - opxy_table
.short opxy5d + 1 - opxy_table
.short opxy5e + 1 - opxy_table
.short op5f + 1 - opxy_table
.short opxy60 + 1 - opxy_table
.short opxy61 + 1 - opxy_table
.short opxy62 + 1 - opxy_table
.short opxy63 + 1 - opxy_table
.short op64 + 1 - opxy_table
.short opxy65 + 1 - opxy_table
.short opxy66 + 1 - opxy_table
.short opxy67 + 1 - opxy_table
.short opxy68 + 1 - opxy_table
.short opxy69 + 1 - opxy_table
.short opxy6a + 1 - opxy_table
.short opxy6b + 1 - opxy_table
.short opxy6c + 1 - opxy_table
.short op6d + 1 - opxy_table
.short opxy6e + 1 - opxy_table
.short opxy6f + 1 - opxy_table
.short opxy70 + 1 - opxy_table
.short opxy71 + 1 - opxy_table
.short opxy72 + 1 - opxy_table
.short opxy73 + 1 - opxy_table
.short opxy74 + 1 - opxy_table
.short opxy75 + 1 - opxy_table
.short op76 + 1 - opxy_table
.short opxy77 + 1 - opxy_table
.short op78 + 1 - opxy_table
.short op79 + 1 - opxy_table
.short op7a + 1 - opxy_table
.short op7b + 1 - opxy_table
.short opxy7c + 1 - opxy_table
.short opxy7d + 1 - opxy_table
.short opxy7e + 1 - opxy_table
.short op7f + 1 - opxy_table
.short op80 + 1 - opxy_table
.short op81 + 1 - opxy_table
.short op82 + 1 - opxy_table
.short op83 + 1 - opxy_table
.short opxy84 + 1 - opxy_table
.short opxy85 + 1 - opxy_table
.short opxy86 + 1 - opxy_table
.short op87 + 1 - opxy_table
.short op88 + 1 - opxy_table
.short op89 + 1 - opxy_table
.short op8a + 1 - opxy_table
.short op8b + 1 - opxy_table
.short opxy8c + 1 - opxy_table
.short opxy8d + 1 - opxy_table
.short opxy8e + 1 - opxy_table
.short op8f + 1 - opxy_table
.short op90 + 1 - opxy_table
.short op91 + 1 - opxy_table
.short op92 + 1 - opxy_table
.short op93 + 1 - opxy_table
.short opxy94 + 1 - opxy_table
.short opxy95 + 1 - opxy_table
.short opxy96 + 1 - opxy_table
.short op97 + 1 - opxy_table
.short op98 + 1 - opxy_table
.short op99 + 1 - opxy_table
.short op9a + 1 - opxy_table
.short op9b + 1 - opxy_table
.short opxy9c + 1 - opxy_table
.short opxy9d + 1 - opxy_table
.short opxy9e + 1 - opxy_table
.short op9f + 1 - opxy_table
.short opa0 + 1 - opxy_table
.short opa1 + 1 - opxy_table
.short opa2 + 1 - opxy_table
.short opa3 + 1 - opxy_table
.short opxya4 + 1 - opxy_table
.short opxya5 + 1 - opxy_table
.short opxya6 + 1 - opxy_table
.short opa7 + 1 - opxy_table
.short opa8 + 1 - opxy_table
.short opa9 + 1 - opxy_table
.short opaa + 1 - opxy_table
.short opab + 1 - opxy_table
.short opxyac + 1 - opxy_table
.short opxyad + 1 - opxy_table
.short opxyae + 1 - opxy_table
.short opaf + 1 - opxy_table
.short opb0 + 1 - opxy_table
.short opb1 + 1 - opxy_table
.short opb2 + 1 - opxy_table
.short opb3 + 1 - opxy_table
.short opxyb4 + 1 - opxy_table
.short opxyb5 + 1 - opxy_table
.short opxyb6 + 1 - opxy_table
.short opb7 + 1 - opxy_table
.short opb8 + 1 - opxy_table
.short opb9 + 1 - opxy_table
.short opba + 1 - opxy_table
.short opbb + 1 - opxy_table
.short opxybc + 1 - opxy_table
.short opxybd + 1 - opxy_table
.short opxybe + 1 - opxy_table
.short opbf + 1 - opxy_table
.short opc0 + 1 - opxy_table
.short opc1 + 1 - opxy_table
.short opc2 + 1 - opxy_table
.short opc3 + 1 - opxy_table
.short opc4 + 1 - opxy_table
.short opc5 + 1 - opxy_table
.short opc6 + 1 - opxy_table
.short opc7 + 1 - opxy_table
.short opc8 + 1 - opxy_table
.short opc9 + 1 - opxy_table
.short opca + 1 - opxy_table
.short opcb + 1 - opxy_table
.short opcc + 1 - opxy_table
.short opcd + 1 - opxy_table
.short opce + 1 - opxy_table
.short opcf + 1 - opxy_table
.short opd0 + 1 - opxy_table
.short opd1 + 1 - opxy_table
.short opd2 + 1 - opxy_table
.short opd3 + 1 - opxy_table
.short opd4 + 1 - opxy_table
.short opd5 + 1 - opxy_table
.short opd6 + 1 - opxy_table
.short opd7 + 1 - opxy_table
.short opd8 + 1 - opxy_table
.short opd9 + 1 - opxy_table
.short opda + 1 - opxy_table
.short opdb + 1 - opxy_table
.short opdc + 1 - opxy_table
.short opdd + 1 - opxy_table
.short opde + 1 - opxy_table
.short opdf + 1 - opxy_table
.short ope0 + 1 - opxy_table
.short opxye1 + 1 - opxy_table
.short ope2 + 1 - opxy_table
.short opxye3 + 1 - opxy_table
.short ope4 + 1 - opxy_table
.short opxye5 + 1 - opxy_table
.short ope6 + 1 - opxy_table
.short ope7 + 1 - opxy_table
.short ope8 + 1 - opxy_table
.short opxye9 + 1 - opxy_table
.short opea + 1 - opxy_table
.short opeb + 1 - opxy_table
.short opec + 1 - opxy_table
.short oped + 1 - opxy_table
.short opee + 1 - opxy_table
.short opef + 1 - opxy_table
.short opf0 + 1 - opxy_table
.short opf1 + 1 - opxy_table
.short opf2 + 1 - opxy_table
.short opf3 + 1 - opxy_table
.short opf4 + 1 - opxy_table
.short opf5 + 1 - opxy_table
.short opf6 + 1 - opxy_table
.short opf7 + 1 - opxy_table
.short opf8 + 1 - opxy_table
.short opxyf9 + 1 - opxy_table
.short opfa + 1 - opxy_table
.short opfb + 1 - opxy_table
.short opfc + 1 - opxy_table
.short opfd + 1 - opxy_table
.short opfe + 1 - opxy_table
.short opff + 1 - opxy_table
opxy09:
	mov  r0, r_ixy
	adds  r0, #1
	uxth r0, r0
	mov  r_memptr, r0
	mov  r0, r_ixy
	mov  r1, r_bc
	push {lr}
	bl   add16
	mov  r_ixy, r0
	adds  r_t, #7
	pop  {pc}

opxy19:
	mov  r0, r_ixy
	adds  r0, #1
	uxth r0, r0
	mov  r_memptr, r0
	mov  r0, r_ixy
	mov  r1, r_de
	push {lr}
	bl   add16
	mov  r_ixy, r0
	adds  r_t, #7
	pop  {pc}

.ltorg
opxy21:
	mov  r0, r_pc
	push {lr}
	bl   read16inc
	mov  r_pc, r1
	mov  r_ixy, r0
	adds  r_t, #6
	pop  {pc}

opxy22:
	mov  r0, r_pc
	push {lr}
	bl   read16inc
	mov  r_pc, r1
	mov  r_temp_restricted, r0
	adds  r0, r_temp_restricted, #1
	uxth r0, r0
	mov  r_memptr, r0
	mov  r0, r_ixy
	mov  r1, r_temp_restricted
	bl   write16
	adds  r_t, #12
	pop  {pc}

opxy23:
	mov  r0, r_ixy
	adds  r0, #1
	uxth r0, r0
	mov  r_ixy, r0
	adds  r_t, #2
	bx   lr

opxy24:
	mov  r0, r_ixy
	lsrs  r0, #8
	push {lr}
	bl   inc8
	lsls  r0, #8
	mov  r1, r_ixy
	uxtb r1, r1
	orrs  r0, r1
	mov  r_ixy, r0
	pop  {pc}

opxy25:
	mov  r0, r_ixy
	lsrs  r0, #8
	push {lr}
	bl   dec8
	lsls  r0, #8
	mov  r1, r_ixy
	uxtb r1, r1
	orrs  r0, r1
	mov  r_ixy, r0
	pop  {pc}

opxy26:
	mov  r0, r_pc
	push {lr}
	bl   read8inc
	mov  r_pc, r1
	lsls r0, #8
	mov  r1, r_ixy
	uxtb r1, r1
	orrs  r0, r1
	mov  r_ixy, r0
	adds  r_t, #3
	pop  {pc}

opxy29:
	mov  r0, r_ixy
	adds  r0, #1
	uxth r0, r0
	mov  r_memptr, r0
	mov  r0, r_ixy
	mov  r1, r_ixy
	push {lr}
	bl   add16
	mov  r_ixy, r0
	adds  r_t, #7
	pop  {pc}

opxy2a:
	mov  r0, r_pc
	push {lr}
	bl   read16inc
	mov  r_pc, r1
	mov  r_temp_restricted, r0
	mov  r0, r_temp_restricted
	bl   read16
	mov  r_ixy, r0
	adds  r0, r_temp_restricted, #1
	uxth r0, r0
	mov  r_memptr, r0
	adds  r_t, #12
	pop  {pc}

opxy2b:
	mov  r0, r_ixy
	subs  r0, #1
	uxth r0, r0
	mov  r_ixy, r0
	adds  r_t, #2
	bx   lr

opxy2c:
	mov  r0, r_ixy
	uxtb r0, r0
	push {lr}
	bl   inc8
	mov  r1, r_ixy
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r0
	mov  r_ixy, r1
	pop  {pc}

opxy2d:
	mov  r0, r_ixy
	uxtb r0, r0
	push {lr}
	bl   dec8
	mov  r1, r_ixy
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r0
	mov  r_ixy, r1
	pop  {pc}

opxy2e:
	mov  r0, r_pc
	push {lr}
	bl   read8inc
	mov  r_pc, r1
	mov  r1, r_ixy
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r0
	mov  r_ixy, r1
	adds  r_t, #3
	pop  {pc}

opxy34:
	mov  r0, r_pc
	push {lr}
	bl   read8inc
	mov  r_pc, r1
	sxtb r0, r0
	mov  r1, r_ixy
	add  r0, r1
	uxth r0, r0
	ldr  r1, =z80a_resting_state
	str  r0, [r1, #76] // scratch
	ldr  r0, =z80a_resting_state
	ldr  r0, [r0, #76] // scratch
	read8_internal r0
	mov  r_temp_restricted, r0		// fine to overwrite hi in r_temp_restricted
	uxtb r0, r_temp_restricted
	bl   inc8
	mov  r_temp_restricted, r0		// fine to overwrite hi in r_temp_restricted
	ldr  r0, =z80a_resting_state
	ldr  r0, [r0, #76] // scratch
	mov  r1, r0
	uxtb r0, r_temp_restricted
	bl   write8
	adds  r_t, #15
	pop  {pc}

opxy35:
	mov  r0, r_pc
	push {lr}
	bl   read8inc
	mov  r_pc, r1
	sxtb r0, r0
	mov  r1, r_ixy
	add  r0, r1
	uxth r0, r0
	ldr  r1, =z80a_resting_state
	str  r0, [r1, #76] // scratch
	ldr  r0, =z80a_resting_state
	ldr  r0, [r0, #76] // scratch
	read8_internal r0
	mov  r_temp_restricted, r0		// fine to overwrite hi in r_temp_restricted
	uxtb r0, r_temp_restricted
	bl   dec8
	mov  r_temp_restricted, r0		// fine to overwrite hi in r_temp_restricted
	ldr  r0, =z80a_resting_state
	ldr  r0, [r0, #76] // scratch
	mov  r1, r0
	uxtb r0, r_temp_restricted
	bl   write8
	adds  r_t, #15
	pop  {pc}

opxy36:
	mov  r0, r_pc
	push {lr}
	bl   read8inc
	mov  r_pc, r1
	sxtb r0, r0
	mov  r1, r_ixy
	add  r0, r1
	uxth r0, r0
	ldr  r1, =z80a_resting_state
	str  r0, [r1, #76] // scratch
	mov  r0, r_pc
	bl   read8inc
	mov  r_pc, r1
	mov  r_temp_restricted, r0		// fine to overwrite hi in r_temp_restricted
	ldr  r0, =z80a_resting_state
	ldr  r0, [r0, #76] // scratch
	mov  r1, r0
	uxtb r0, r_temp_restricted
	bl   write8
	adds  r_t, #11
	pop  {pc}

opxy39:
	mov  r0, r_ixy
	adds  r0, #1
	uxth r0, r0
	mov  r_memptr, r0
	mov  r0, r_ixy
	mov  r1, r_sp
	push {lr}
	bl   add16
	mov  r_ixy, r0
	adds  r_t, #7
	pop  {pc}

.ltorg
opxy44:
	mov  r0, r_ixy
	lsrs  r0, #8
	lsls  r0, #8
	mov  r1, r_bc
	uxtb r1, r1
	orrs  r0, r1
	mov  r_bc, r0
	bx   lr

opxy45:
	mov  r0, r_ixy
	uxtb r0, r0
	lsls r0, #8
	mov  r1, r_bc
	uxtb r1, r1
	orrs  r0, r1
	mov  r_bc, r0
	bx   lr

opxy46:
	mov  r0, r_pc
	push {lr}
	bl   read8inc
	mov  r_pc, r1
	sxtb r0, r0
	mov  r1, r_ixy
	add  r0, r1
	uxth r0, r0
	read8_internal r0
	lsls r0, #8
	mov  r1, r_bc
	uxtb r1, r1
	orrs  r0, r1
	mov  r_bc, r0
	adds  r_t, #11
	pop  {pc}

opxy4c:
	mov  r0, r_ixy
	lsrs  r0, #8
	mov  r1, r_bc
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r0
	mov  r_bc, r1
	bx   lr

opxy4d:
	mov  r0, r_ixy
	uxtb r0, r0
	mov  r1, r_bc
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r0
	mov  r_bc, r1
	bx   lr

opxy4e:
	mov  r0, r_pc
	push {lr}
	bl   read8inc
	mov  r_pc, r1
	sxtb r0, r0
	mov  r1, r_ixy
	add  r0, r1
	uxth r0, r0
	read8_internal r0
	mov  r1, r_bc
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r0
	mov  r_bc, r1
	adds  r_t, #11
	pop  {pc}

opxy54:
	mov  r0, r_ixy
	lsrs  r0, #8
	lsls  r0, #8
	mov  r1, r_de
	uxtb r1, r1
	orrs  r0, r1
	mov  r_de, r0
	bx   lr

opxy55:
	mov  r0, r_ixy
	uxtb r0, r0
	lsls r0, #8
	mov  r1, r_de
	uxtb r1, r1
	orrs  r0, r1
	mov  r_de, r0
	bx   lr

opxy56:
	mov  r0, r_pc
	push {lr}
	bl   read8inc
	mov  r_pc, r1
	sxtb r0, r0
	mov  r1, r_ixy
	add  r0, r1
	uxth r0, r0
	read8_internal r0
	lsls r0, #8
	mov  r1, r_de
	uxtb r1, r1
	orrs  r0, r1
	mov  r_de, r0
	adds  r_t, #11
	pop  {pc}

opxy5c:
	mov  r0, r_ixy
	lsrs  r0, #8
	mov  r1, r_de
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r0
	mov  r_de, r1
	bx   lr

opxy5d:
	mov  r0, r_ixy
	uxtb r0, r0
	mov  r1, r_de
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r0
	mov  r_de, r1
	bx   lr

opxy5e:
	mov  r0, r_pc
	push {lr}
	bl   read8inc
	mov  r_pc, r1
	sxtb r0, r0
	mov  r1, r_ixy
	add  r0, r1
	uxth r0, r0
	read8_internal r0
	mov  r1, r_de
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r0
	mov  r_de, r1
	adds  r_t, #11
	pop  {pc}

opxy60:
	mov  r0, r_bc
	lsrs  r0, #8
	lsls  r0, #8
	mov  r1, r_ixy
	uxtb r1, r1
	orrs  r0, r1
	mov  r_ixy, r0
	bx   lr

.ltorg
opxy61:
	mov  r0, r_bc
	uxtb r0, r0
	lsls r0, #8
	mov  r1, r_ixy
	uxtb r1, r1
	orrs  r0, r1
	mov  r_ixy, r0
	bx   lr

opxy62:
	mov  r0, r_de
	lsrs  r0, #8
	lsls  r0, #8
	mov  r1, r_ixy
	uxtb r1, r1
	orrs  r0, r1
	mov  r_ixy, r0
	bx   lr

opxy63:
	mov  r0, r_de
	uxtb r0, r0
	lsls r0, #8
	mov  r1, r_ixy
	uxtb r1, r1
	orrs  r0, r1
	mov  r_ixy, r0
	bx   lr

opxy65:
	mov  r0, r_ixy
	uxtb r0, r0
	lsls r0, #8
	mov  r1, r_ixy
	uxtb r1, r1
	orrs  r0, r1
	mov  r_ixy, r0
	bx   lr

opxy66:
	mov  r0, r_pc
	push {lr}
	bl   read8inc
	mov  r_pc, r1
	sxtb r0, r0
	mov  r1, r_ixy
	add  r0, r1
	uxth r0, r0
	read8_internal r0
	lsls r0, #8
	mov  r1, r_hl
	uxtb r1, r1
	orrs  r0, r1
	mov  r_hl, r0
	adds  r_t, #11
	pop  {pc}

opxy67:
	lsrs  r0, r_af, #8
	lsls  r0, #8
	mov  r1, r_ixy
	uxtb r1, r1
	orrs  r0, r1
	mov  r_ixy, r0
	bx   lr

opxy68:
	mov  r0, r_bc
	lsrs  r0, #8
	mov  r1, r_ixy
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r0
	mov  r_ixy, r1
	bx   lr

opxy69:
	mov  r0, r_bc
	uxtb r0, r0
	mov  r1, r_ixy
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r0
	mov  r_ixy, r1
	bx   lr

opxy6a:
	mov  r0, r_de
	lsrs  r0, #8
	mov  r1, r_ixy
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r0
	mov  r_ixy, r1
	bx   lr

opxy6b:
	mov  r0, r_de
	uxtb r0, r0
	mov  r1, r_ixy
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r0
	mov  r_ixy, r1
	bx   lr

opxy6c:
	mov  r0, r_ixy
	lsrs  r0, #8
	mov  r1, r_ixy
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r0
	mov  r_ixy, r1
	bx   lr

opxy6e:
	mov  r0, r_pc
	push {lr}
	bl   read8inc
	mov  r_pc, r1
	sxtb r0, r0
	mov  r1, r_ixy
	add  r0, r1
	uxth r0, r0
	read8_internal r0
	mov  r1, r_hl
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r0
	mov  r_hl, r1
	adds  r_t, #11
	pop  {pc}

opxy6f:
	lsrs  r0, r_af, #8
	mov  r1, r_ixy
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r0
	mov  r_ixy, r1
	bx   lr

opxy70:
	mov  r0, r_pc
	push {lr}
	bl   read8inc
	mov  r_pc, r1
	sxtb r0, r0
	mov  r1, r_ixy
	add  r0, r1
	uxth r0, r0
	mov  r1, r0
	mov  r0, r_bc
	lsrs  r0, #8
	bl   write8
	adds  r_t, #11
	pop  {pc}

opxy71:
	mov  r0, r_pc
	push {lr}
	bl   read8inc
	mov  r_pc, r1
	sxtb r0, r0
	mov  r1, r_ixy
	add  r0, r1
	uxth r0, r0
	mov  r1, r0
	mov  r0, r_bc
	uxtb r0, r0
	bl   write8
	adds  r_t, #11
	pop  {pc}

opxy72:
	mov  r0, r_pc
	push {lr}
	bl   read8inc
	mov  r_pc, r1
	sxtb r0, r0
	mov  r1, r_ixy
	add  r0, r1
	uxth r0, r0
	mov  r1, r0
	mov  r0, r_de
	lsrs  r0, #8
	bl   write8
	adds  r_t, #11
	pop  {pc}

opxy73:
	mov  r0, r_pc
	push {lr}
	bl   read8inc
	mov  r_pc, r1
	sxtb r0, r0
	mov  r1, r_ixy
	add  r0, r1
	uxth r0, r0
	mov  r1, r0
	mov  r0, r_de
	uxtb r0, r0
	bl   write8
	adds  r_t, #11
	pop  {pc}

opxy74:
	mov  r0, r_pc
	push {lr}
	bl   read8inc
	mov  r_pc, r1
	sxtb r0, r0
	mov  r1, r_ixy
	add  r0, r1
	uxth r0, r0
	mov  r1, r0
	mov  r0, r_hl
	lsrs  r0, #8
	bl   write8
	adds  r_t, #11
	pop  {pc}

opxy75:
	mov  r0, r_pc
	push {lr}
	bl   read8inc
	mov  r_pc, r1
	sxtb r0, r0
	mov  r1, r_ixy
	add  r0, r1
	uxth r0, r0
	mov  r1, r0
	mov  r0, r_hl
	uxtb r0, r0
	bl   write8
	adds  r_t, #11
	pop  {pc}

opxy77:
	mov  r0, r_pc
	push {lr}
	bl   read8inc
	mov  r_pc, r1
	sxtb r0, r0
	mov  r1, r_ixy
	add  r0, r1
	uxth r0, r0
	mov  r1, r0
	lsrs  r0, r_af, #8
	bl   write8
	adds  r_t, #11
	pop  {pc}

opxy7c:
	mov  r0, r_ixy
	lsrs  r0, #8
	lsls  r0, #8
	uxtb r1, r_af
	orrs  r0, r1
	mov  r_af, r0
	bx   lr

opxy7d:
	mov  r0, r_ixy
	uxtb r0, r0
	lsls r0, #8
	uxtb r1, r_af
	orrs  r0, r1
	mov  r_af, r0
	bx   lr

opxy7e:
	mov  r0, r_pc
	push {lr}
	bl   read8inc
	mov  r_pc, r1
	sxtb r0, r0
	mov  r1, r_ixy
	add  r0, r1
	uxth r0, r0
	read8_internal r0
	lsls r0, #8
	uxtb r1, r_af
	orrs  r0, r1
	mov  r_af, r0
	adds  r_t, #11
	pop  {pc}

.ltorg
opxy84:
	mov  r0, r_ixy
	lsrs  r0, #8
	ldr  r2, =add8
	bx   r2

opxy85:
	mov  r0, r_ixy
	uxtb r0, r0
	ldr  r2, =add8
	bx   r2

opxy86:
	mov  r0, r_pc
	push {lr}
	bl   read8inc
	mov  r_pc, r1
	sxtb r0, r0
	mov  r1, r_ixy
	add  r0, r1
	uxth r0, r0
	read8_internal r0
	bl   add8
	adds  r_t, #11
	pop  {pc}

opxy8c:
	mov  r0, r_ixy
	lsrs  r0, #8
	ldr  r2, =adc8
	bx   r2

opxy8d:
	mov  r0, r_ixy
	uxtb r0, r0
	ldr  r2, =adc8
	bx   r2

opxy8e:
	mov  r0, r_pc
	push {lr}
	bl   read8inc
	mov  r_pc, r1
	sxtb r0, r0
	mov  r1, r_ixy
	add  r0, r1
	uxth r0, r0
	read8_internal r0
	bl   adc8
	adds  r_t, #11
	pop  {pc}

opxy94:
	mov  r0, r_ixy
	lsrs  r0, #8
	ldr  r2, =sub8
	bx   r2

opxy95:
	mov  r0, r_ixy
	uxtb r0, r0
	ldr  r2, =sub8
	bx   r2

opxy96:
	mov  r0, r_pc
	push {lr}
	bl   read8inc
	mov  r_pc, r1
	sxtb r0, r0
	mov  r1, r_ixy
	add  r0, r1
	uxth r0, r0
	read8_internal r0
	bl   sub8
	adds  r_t, #11
	pop  {pc}

opxy9c:
	mov  r0, r_ixy
	lsrs  r0, #8
	ldr  r2, =sbc8
	bx   r2

opxy9d:
	mov  r0, r_ixy
	uxtb r0, r0
	ldr  r2, =sbc8
	bx   r2

opxy9e:
	mov  r0, r_pc
	push {lr}
	bl   read8inc
	mov  r_pc, r1
	sxtb r0, r0
	mov  r1, r_ixy
	add  r0, r1
	uxth r0, r0
	read8_internal r0
	bl   sbc8
	adds  r_t, #11
	pop  {pc}

.ltorg
opxya4:
	mov  r0, r_ixy
	lsrs  r0, #8
	ldr  r2, =ands8
	bx   r2

opxya5:
	mov  r0, r_ixy
	uxtb r0, r0
	ldr  r2, =ands8
	bx   r2

opxya6:
	mov  r0, r_pc
	push {lr}
	bl   read8inc
	mov  r_pc, r1
	sxtb r0, r0
	mov  r1, r_ixy
	add  r0, r1
	uxth r0, r0
	read8_internal r0
	bl   ands8
	adds  r_t, #11
	pop  {pc}

opxyac:
	mov  r0, r_ixy
	lsrs  r0, #8
	ldr  r2, =xor8
	bx   r2

opxyad:
	mov  r0, r_ixy
	uxtb r0, r0
	ldr  r2, =xor8
	bx   r2

opxyae:
	mov  r0, r_pc
	push {lr}
	bl   read8inc
	mov  r_pc, r1
	sxtb r0, r0
	mov  r1, r_ixy
	add  r0, r1
	uxth r0, r0
	read8_internal r0
	bl   xor8
	adds  r_t, #11
	pop  {pc}

opxyb4:
	mov  r0, r_ixy
	lsrs  r0, #8
	ldr  r2, =or8
	bx   r2

opxyb5:
	mov  r0, r_ixy
	uxtb r0, r0
	ldr  r2, =or8
	bx   r2

opxyb6:
	mov  r0, r_pc
	push {lr}
	bl   read8inc
	mov  r_pc, r1
	sxtb r0, r0
	mov  r1, r_ixy
	add  r0, r1
	uxth r0, r0
	read8_internal r0
	bl   or8
	adds  r_t, #11
	pop  {pc}

opxybc:
	mov  r0, r_ixy
	lsrs  r0, #8
	ldr  r2, =cp8
	bx   r2

opxybd:
	mov  r0, r_ixy
	uxtb r0, r0
	ldr  r2, =cp8
	bx   r2

opxybe:
	mov  r0, r_pc
	push {lr}
	bl   read8inc
	mov  r_pc, r1
	sxtb r0, r0
	mov  r1, r_ixy
	add  r0, r1
	uxth r0, r0
	read8_internal r0
	bl   cp8
	adds  r_t, #11
	pop  {pc}

.ltorg
.ltorg
opxye1:
	mov  r0, r_sp
	push {lr}
	bl   read16inc
	mov  r_sp, r1
	mov  r_ixy, r0
	adds  r_t, #6
	pop  {pc}

opxye3:
	mov  r0, r_sp
	push {lr}
	bl   read16
	mov  r_memptr, r0
	mov  r0, r_ixy
	mov  r1, r_sp
	bl   write16
	mov  r_ixy, r_memptr
	adds  r_t, #15
	pop  {pc}

opxye5:
	mov  r0, r_ixy
	push {lr}
	bl   _push
	adds  r_t, #7
	pop  {pc}

opxye9:
	mov  r_pc, r_ixy
	bx   lr

opxyf9:
	mov  r_sp, r_ixy
	adds  r_t, #2
	bx   lr

.ltorg
// === END dd/fd prefix xy opcodes r_temp holds ix or iy

// === BEGIN ed prefix
ope_table:
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short ope40 + 1 - ope_table
.short ope41 + 1 - ope_table
.short ope42 + 1 - ope_table
.short ope43 + 1 - ope_table
.short ope44 + 1 - ope_table
.short ope45 + 1 - ope_table
.short ope46 + 1 - ope_table
.short ope47 + 1 - ope_table
.short ope48 + 1 - ope_table
.short ope49 + 1 - ope_table
.short ope4a + 1 - ope_table
.short ope4b + 1 - ope_table
.short ope4c + 1 - ope_table
.short ope4d + 1 - ope_table
.short ope4e + 1 - ope_table
.short ope4f + 1 - ope_table
.short ope50 + 1 - ope_table
.short ope51 + 1 - ope_table
.short ope52 + 1 - ope_table
.short ope53 + 1 - ope_table
.short ope54 + 1 - ope_table
.short ope55 + 1 - ope_table
.short ope56 + 1 - ope_table
.short ope57 + 1 - ope_table
.short ope58 + 1 - ope_table
.short ope59 + 1 - ope_table
.short ope5a + 1 - ope_table
.short ope5b + 1 - ope_table
.short ope5c + 1 - ope_table
.short ope5d + 1 - ope_table
.short ope5e + 1 - ope_table
.short ope5f + 1 - ope_table
.short ope60 + 1 - ope_table
.short ope61 + 1 - ope_table
.short ope62 + 1 - ope_table
.short ope63 + 1 - ope_table
.short ope64 + 1 - ope_table
.short ope65 + 1 - ope_table
.short ope66 + 1 - ope_table
.short ope67 + 1 - ope_table
.short ope68 + 1 - ope_table
.short ope69 + 1 - ope_table
.short ope6a + 1 - ope_table
.short ope6b + 1 - ope_table
.short ope6c + 1 - ope_table
.short ope6d + 1 - ope_table
.short ope6e + 1 - ope_table
.short ope6f + 1 - ope_table
.short ope70 + 1 - ope_table
.short ope71 + 1 - ope_table
.short ope72 + 1 - ope_table
.short ope73 + 1 - ope_table
.short ope74 + 1 - ope_table
.short ope75 + 1 - ope_table
.short ope76 + 1 - ope_table
.short ope77 + 1 - ope_table
.short ope78 + 1 - ope_table
.short ope79 + 1 - ope_table
.short ope7a + 1 - ope_table
.short ope7b + 1 - ope_table
.short ope7c + 1 - ope_table
.short ope7d + 1 - ope_table
.short ope7e + 1 - ope_table
.short ope7f + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short opea0 + 1 - ope_table
.short opea1 + 1 - ope_table
.short opea2 + 1 - ope_table
.short opea3 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short opea8 + 1 - ope_table
.short opea9 + 1 - ope_table
.short opeaa + 1 - ope_table
.short opeab + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short opeb0 + 1 - ope_table
.short opeb1 + 1 - ope_table
.short opeb2 + 1 - ope_table
.short opeb3 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short opeb8 + 1 - ope_table
.short opeb9 + 1 - ope_table
.short opeba + 1 - ope_table
.short opebb + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.short op00 + 1 - ope_table
.ltorg
ope40:
	adds  r_t, #4
	mov  r0, r_bc
	adds  r0, #1
	uxth r0, r0
	mov  r_memptr, r0
	mov  r0, r_bc
	push {lr}
	bl   ioread8
	lsls r0, #8
	mov  r1, r_bc
	uxtb r1, r1
	orrs  r0, r1
	mov  r_bc, r0
	mov  r0, r_bc
	lsrs  r0, #8
	preserve_only_flags r1, CF
	ldr  r1, =_log_f
	ldrb r0, [r1, r0]
	orrs  r_af, r0
	pop  {pc}

.ltorg
ope41:
	adds  r_t, #4
	mov  r0, r_bc
	adds  r0, #1
	uxth r0, r0
	mov  r_memptr, r0
	mov  r0, r_bc
	lsrs  r0, #8
	mov  r1, r_bc
	ldr  r2, =iowrite8
	bx   r2

ope42:
	mov  r0, r_hl
	adds  r0, #1
	uxth r0, r0
	mov  r_memptr, r0
	mov  r0, r_bc
	push {lr}
	bl   sbc16
	adds  r_t, #7
	pop  {pc}

ope43:
	mov  r0, r_pc
	push {lr}
	bl   read16inc
	mov  r_pc, r1
	mov  r_temp, r0
	adds  r0, r_temp, #1
	uxth r0, r0
	mov  r_memptr, r0
	mov  r0, r_bc
	mov  r1, r_temp
	bl   write16
	adds  r_t, #12
	pop  {pc}

ope44:
	ldr  r2, =neg8
	bx   r2

ope45:
	ldr  r0, =z80a_resting_state
	ldrb r0, [r0, #10] // iff2
	ldr  r1, =z80a_resting_state
	strb r0, [r1, #9] // iff1
	mov  r0, r_sp
	push {lr}
	bl   read16inc
	mov  r_sp, r1
	mov  r_temp, r0
	mov  r_pc, r_temp
	mov  r_memptr, r_temp
	adds  r_t, #6
	pop  {pc}

ope46:
	movs  r0, #0
	ldr  r1, =z80a_resting_state
	str  r0, [r1, #0] // im
	bx   lr

ope47:
	lsrs  r0, r_af, #8
	ldr  r1, =z80a_resting_state
	strb r0, [r1, #13] // i
	adds  r_t, #1
	bx   lr

ope48:
	adds  r_t, #4
	mov  r0, r_bc
	adds  r0, #1
	uxth r0, r0
	mov  r_memptr, r0
	mov  r0, r_bc
	push {lr}
	bl   ioread8
	mov  r1, r_bc
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r0
	mov  r_bc, r1
	mov  r0, r_bc
	uxtb r0, r0
	preserve_only_flags r1, CF
	ldr  r1, =_log_f
	ldrb r0, [r1, r0]
	orrs  r_af, r0
	pop  {pc}

ope49:
	adds  r_t, #4
	mov  r0, r_bc
	adds  r0, #1
	uxth r0, r0
	mov  r_memptr, r0
	mov  r0, r_bc		// high half of word is ignored later
	mov  r1, r_bc
	ldr  r2, =iowrite8
	bx   r2

ope4a:
	mov  r0, r_hl
	adds  r0, #1
	uxth r0, r0
	mov  r_memptr, r0
	mov  r0, r_bc
	push {lr}
	bl   adc16
	adds  r_t, #7
	pop  {pc}

ope4b:
	mov  r0, r_pc
	push {lr}
	bl   read16inc
	mov  r_pc, r1
	mov  r_temp, r0
	adds  r0, r_temp, #1
	uxth r0, r0
	mov  r_memptr, r0
	mov  r0, r_temp
	bl   read16
	mov  r_bc, r0
	adds  r_t, #12
	pop  {pc}

ope4c:
	ldr  r2, =neg8
	bx   r2

ope4d:
	ldr  r0, =z80a_resting_state
	ldrb r0, [r0, #10] // iff2
	ldr  r1, =z80a_resting_state
	strb r0, [r1, #9] // iff1
	mov  r0, r_sp
	push {lr}
	bl   read16inc
	mov  r_sp, r1
	mov  r_temp, r0
	mov  r_pc, r_temp
	mov  r_memptr, r_temp
	adds  r_t, #6
	pop  {pc}

ope4e:
	movs  r0, #1
	ldr  r1, =z80a_resting_state
	str  r0, [r1, #0] // im
	bx   lr

ope4f:
	lsrs  r0, r_af, #8
	ldr  r1, =z80a_resting_state
	strb r0, [r1, #12] // r_low
	lsrs  r0, r_af, #8
	movs  r1, #0x80
	ands  r0, r1
	ldr  r1, =z80a_resting_state
	strb r0, [r1, #8] // r_hi
	adds  r_t, #1
	bx   lr

ope50:
	adds  r_t, #4
	mov  r0, r_bc
	adds  r0, #1
	uxth r0, r0
	mov  r_memptr, r0
	mov  r0, r_bc
	push {lr}
	bl   ioread8
	lsls r0, #8
	mov  r1, r_de
	uxtb r1, r1
	orrs  r0, r1
	mov  r_de, r0
	mov  r0, r_de
	lsrs  r0, #8
	preserve_only_flags r1, CF
	ldr  r1, =_log_f
	ldrb r0, [r1, r0]
	orrs  r_af, r0
	pop  {pc}

ope51:
	adds  r_t, #4
	mov  r0, r_bc
	adds  r0, #1
	uxth r0, r0
	mov  r_memptr, r0
	mov  r0, r_de
	lsrs  r0, #8
	mov  r1, r_bc
	ldr  r2, =iowrite8
	bx   r2

ope52:
	mov  r0, r_hl
	adds  r0, #1
	uxth r0, r0
	mov  r_memptr, r0
	mov  r0, r_de
	push {lr}
	bl   sbc16
	adds  r_t, #7
	pop  {pc}

ope53:
	mov  r0, r_pc
	push {lr}
	bl   read16inc
	mov  r_pc, r1
	mov  r_temp, r0
	adds  r0, r_temp, #1
	uxth r0, r0
	mov  r_memptr, r0
	mov  r0, r_de
	mov  r1, r_temp
	bl   write16
	adds  r_t, #12
	pop  {pc}

ope54:
	ldr  r2, =neg8
	bx   r2

ope55:
	ldr  r0, =z80a_resting_state
	ldrb r0, [r0, #10] // iff2
	ldr  r1, =z80a_resting_state
	strb r0, [r1, #9] // iff1
	mov  r0, r_sp
	push {lr}
	bl   read16inc
	mov  r_sp, r1
	mov  r_temp, r0
	mov  r_pc, r_temp
	mov  r_memptr, r_temp
	adds  r_t, #6
	pop  {pc}

ope56:
	movs  r0, #1
	ldr  r1, =z80a_resting_state
	str  r0, [r1, #0] // im
	bx   lr

ope57:
	ldr  r0, =z80a_resting_state
	ldrb r0, [r0, #13] // i
	lsls r0, #8
	uxtb r1, r_af
	orrs  r0, r1
	mov  r_af, r0
	lsrs  r0, r_af, #8
	preserve_only_flags r1, CF
	ldr  r1, =_log_f
	ldrb r0, [r1, r0]
	orrs  r_af, r0
	movs  r1, #PV
	bics  r_af, r1
	adds  r_t, #1
	ldr  r0, =z80a_resting_state
	ldrb r0, [r0, #9] // iff1
	cmp  r0, #0
	beq  1f
#ifndef USE_Z80_ARM_OFFSET_T
	ldr  r0, frame_tacts
#else
	movs  r0, #0
#endif
	subs  r0, #10
	cmp  r_t, r0
	bge  1f
	adds  r_af, #PV
1:
	bx   lr

ope58:
	adds  r_t, #4
	mov  r0, r_bc
	adds  r0, #1
	uxth r0, r0
	mov  r_memptr, r0
	mov  r0, r_bc
	push {lr}
	bl   ioread8
	mov  r1, r_de
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r0
	mov  r_de, r1
	mov  r0, r_de
	uxtb r0, r0
	preserve_only_flags r1, CF
	ldr  r1, =_log_f
	ldrb r0, [r1, r0]
	orrs  r_af, r0
	pop  {pc}

ope59:
	adds  r_t, #4
	mov  r0, r_bc
	adds  r0, #1
	uxth r0, r0
	mov  r_memptr, r0
	mov  r0, r_de		// high half of word is ignored later
	mov  r1, r_bc
	ldr  r2, =iowrite8
	bx   r2

ope5a:
	mov  r0, r_hl
	adds  r0, #1
	uxth r0, r0
	mov  r_memptr, r0
	mov  r0, r_de
	push {lr}
	bl   adc16
	adds  r_t, #7
	pop  {pc}

ope5b:
	mov  r0, r_pc
	push {lr}
	bl   read16inc
	mov  r_pc, r1
	mov  r_temp, r0
	mov  r0, r_temp
	bl   read16
	mov  r_de, r0
	adds  r_t, #12
	pop  {pc}

ope5c:
	ldr  r2, =neg8
	bx   r2

ope5d:
	ldr  r0, =z80a_resting_state
	ldrb r0, [r0, #10] // iff2
	ldr  r1, =z80a_resting_state
	strb r0, [r1, #9] // iff1
	mov  r0, r_sp
	push {lr}
	bl   read16inc
	mov  r_sp, r1
	mov  r_temp, r0
	mov  r_pc, r_temp
	mov  r_memptr, r_temp
	adds  r_t, #6
	pop  {pc}

ope5e:
	movs  r0, #2
	ldr  r1, =z80a_resting_state
	str  r0, [r1, #0] // im
	bx   lr

ope5f:
#ifdef NO_UPDATE_RLOW_IN_FETCH
	lsrs  r0, r_t, #2
#else
	ldr  r0, =z80a_resting_state
	ldrb r0, [r0, #12] // r_low
#endif
	movs  r1, #0x7f
	ands  r0, r1
	ldr  r1, =z80a_resting_state
	ldrb r1, [r1, #8] // r_hi
	orrs  r0, r1
	lsls  r0, #8
	uxtb r1, r_af
	orrs  r0, r1
	mov  r_af, r0
	lsrs  r0, r_af, #8
	preserve_only_flags r1, CF
	ldr  r1, =_log_f
	ldrb r0, [r1, r0]
	orrs  r_af, r0
	movs  r1, #PV
	bics  r_af, r1
	adds  r_t, #1
	ldr  r0, =z80a_resting_state
	ldrb r0, [r0, #9] // iff1
	cmp  r0, #0
	beq  1f
#ifndef USE_Z80_ARM_OFFSET_T
	ldr  r0, frame_tacts
#else
	movs  r0, #0
#endif
	subs  r0, #10
	cmp  r_t, r0
	blt  2f
	ldr  r0, =z80a_resting_state
	ldr  r0, [r0, #4] // eipos
	adds  r0, #8
	cmp  r0, r_t
	bne  1f
2:
	adds  r_af, #PV
1:
	bx   lr

ope60:
	adds  r_t, #4
	mov  r0, r_bc
	adds  r0, #1
	uxth r0, r0
	mov  r_memptr, r0
	mov  r0, r_bc
	push {lr}
	bl   ioread8
	lsls r0, #8
	mov  r1, r_hl
	uxtb r1, r1
	orrs  r0, r1
	mov  r_hl, r0
	mov  r0, r_hl
	lsrs  r0, #8
	preserve_only_flags r1, CF
	ldr  r1, =_log_f
	ldrb r0, [r1, r0]
	orrs  r_af, r0
	pop  {pc}

.ltorg
ope61:
	adds  r_t, #4
	mov  r0, r_bc
	adds  r0, #1
	uxth r0, r0
	mov  r_memptr, r0
	mov  r0, r_hl
	lsrs  r0, #8
	mov  r1, r_bc
	ldr  r2, =iowrite8
	bx   r2

ope62:
	mov  r0, r_hl
	adds  r0, #1
	uxth r0, r0
	mov  r_memptr, r0
	mov  r0, r_hl
	push {lr}
	bl   sbc16
	adds  r_t, #7
	pop  {pc}

ope63:
	mov  r0, r_pc
	push {lr}
	bl   read16inc
	mov  r_pc, r1
	mov  r_temp, r0
	adds  r0, r_temp, #1
	uxth r0, r0
	mov  r_memptr, r0
	mov  r0, r_hl
	mov  r1, r_temp
	bl   write16
	adds  r_t, #12
	pop  {pc}

ope64:
	ldr  r2, =neg8
	bx   r2

ope65:
	ldr  r0, =z80a_resting_state
	ldrb r0, [r0, #10] // iff2
	ldr  r1, =z80a_resting_state
	strb r0, [r1, #9] // iff1
	mov  r0, r_sp
	push {lr}
	bl   read16inc
	mov  r_sp, r1
	mov  r_temp, r0
	mov  r_pc, r_temp
	mov  r_memptr, r_temp
	adds  r_t, #6
	pop  {pc}

ope66:
	movs  r0, #0
	ldr  r1, =z80a_resting_state
	str  r0, [r1, #0] // im
	bx   lr

ope67:
	mov  r0, r_hl
	read8_internal r0
	mov  r_temp, r0		// fine to overwrite hi in r_temp
	mov  r0, r_hl
	adds  r0, #1
	uxth r0, r0
	mov  r_memptr, r0
	lsrs  r0, r_af, #8
	lsls  r0, #4
	uxtb r1, r_temp
	lsrs  r1, #4
	orrs  r0, r1
	mov  r1, r_hl
	push {lr}
	bl   write8
	lsrs  r0, r_af, #8
	movs  r2, #0xf0
	ands  r0, r2
	uxtb r1, r_temp
	bics  r1, r2
	orrs  r0, r1
	lsls r0, #8
	uxtb r1, r_af
	orrs  r0, r1
	mov  r_af, r0
	lsrs  r0, r_af, #8
	preserve_only_flags r1, CF
	ldr  r1, =_log_f
	ldrb r0, [r1, r0]
	orrs  r_af, r0
	adds  r_t, #10
	pop  {pc}

ope68:
	adds  r_t, #4
	mov  r0, r_bc
	adds  r0, #1
	uxth r0, r0
	mov  r_memptr, r0
	mov  r0, r_bc
	push {lr}
	bl   ioread8
	mov  r1, r_hl
	lsrs  r1, #8
	lsls  r1, #8
	orrs  r1, r0
	mov  r_hl, r1
	mov  r0, r_hl
	uxtb r0, r0
	preserve_only_flags r1, CF
	ldr  r1, =_log_f
	ldrb r0, [r1, r0]
	orrs  r_af, r0
	pop  {pc}

ope69:
	adds  r_t, #4
	mov  r0, r_bc
	adds  r0, #1
	uxth r0, r0
	mov  r_memptr, r0
	mov  r0, r_hl		// high half of word is ignored later
	mov  r1, r_bc
	ldr  r2, =iowrite8
	bx   r2

ope6a:
	mov  r0, r_hl
	adds  r0, #1
	uxth r0, r0
	mov  r_memptr, r0
	mov  r0, r_hl
	push {lr}
	bl   adc16
	adds  r_t, #7
	pop  {pc}

ope6b:
	mov  r0, r_pc
	push {lr}
	bl   read16inc
	mov  r_pc, r1
	mov  r_temp, r0
	adds  r0, r_temp, #1
	uxth r0, r0
	mov  r_memptr, r0
	mov  r0, r_temp
	bl   read16
	mov  r_hl, r0
	adds  r_t, #12
	pop  {pc}

ope6c:
	ldr  r2, =neg8
	bx   r2

ope6d:
	ldr  r0, =z80a_resting_state
	ldrb r0, [r0, #10] // iff2
	ldr  r1, =z80a_resting_state
	strb r0, [r1, #9] // iff1
	mov  r0, r_sp
	push {lr}
	bl   read16inc
	mov  r_sp, r1
	mov  r_temp, r0
	mov  r_pc, r_temp
	mov  r_memptr, r_temp
	adds  r_t, #6
	pop  {pc}

ope6e:
	movs  r0, #1
	ldr  r1, =z80a_resting_state
	str  r0, [r1, #0] // im
	bx   lr

ope6f:
	mov  r0, r_hl
	read8_internal r0
	mov  r_temp, r0		// fine to overwrite hi in r_temp
	mov  r0, r_hl
	adds  r0, #1
	uxth r0, r0
	mov  r_memptr, r0
	lsrs  r0, r_af, #8
	movs  r2, #0xf
	ands  r0, r2
	uxtb r1, r_temp
	lsls  r1, #4
	orrs  r0, r1
	mov  r1, r_hl
	push {lr}
	bl   write8
	lsrs  r0, r_af, #8
	movs  r2, #0xf0
	ands  r0, r2
	uxtb r1, r_temp
	lsrs  r1, #4
	orrs  r0, r1
	lsls r0, #8
	uxtb r1, r_af
	orrs  r0, r1
	mov  r_af, r0
	lsrs  r0, r_af, #8
	preserve_only_flags r1, CF
	ldr  r1, =_log_f
	ldrb r0, [r1, r0]
	orrs  r_af, r0
	adds  r_t, #10
	pop  {pc}

ope70:
	adds  r_t, #4
	mov  r0, r_bc
	adds  r0, #1
	uxth r0, r0
	mov  r_memptr, r0
	mov  r0, r_bc
	push {lr}
	bl   ioread8
	preserve_only_flags r1, CF
	ldr  r1, =_log_f
	ldrb r0, [r1, r0]
	orrs  r_af, r0
	pop  {pc}

ope71:
	adds  r_t, #4
	mov  r0, r_bc
	adds  r0, #1
	uxth r0, r0
	mov  r_memptr, r0
	movs  r0, #0
	mov  r1, r_bc
	ldr  r2, =iowrite8
	bx   r2

ope72:
	mov  r0, r_hl
	adds  r0, #1
	uxth r0, r0
	mov  r_memptr, r0
	mov  r0, r_sp
	push {lr}
	bl   sbc16
	adds  r_t, #7
	pop  {pc}

ope73:
	mov  r0, r_pc
	push {lr}
	bl   read16inc
	mov  r_pc, r1
	mov  r_temp, r0
	adds  r0, r_temp, #1
	uxth r0, r0
	mov  r_memptr, r0
	mov  r0, r_sp
	mov  r1, r_temp
	bl   write16
	adds  r_t, #12
	pop  {pc}

ope74:
	ldr  r2, =neg8
	bx   r2

ope75:
	ldr  r0, =z80a_resting_state
	ldrb r0, [r0, #10] // iff2
	ldr  r1, =z80a_resting_state
	strb r0, [r1, #9] // iff1
	mov  r0, r_sp
	push {lr}
	bl   read16inc
	mov  r_sp, r1
	mov  r_temp, r0
	mov  r_pc, r_temp
	mov  r_memptr, r_temp
	adds  r_t, #6
	pop  {pc}

ope76:
	movs  r0, #1
	ldr  r1, =z80a_resting_state
	str  r0, [r1, #0] // im
	bx   lr

ope77:
	bx   lr

ope78:
	adds  r_t, #4
	mov  r0, r_bc
	adds  r0, #1
	uxth r0, r0
	mov  r_memptr, r0
	mov  r0, r_bc
	push {lr}
	bl   ioread8
	lsls r0, #8
	uxtb r1, r_af
	orrs  r0, r1
	mov  r_af, r0
	lsrs  r0, r_af, #8
	preserve_only_flags r1, CF
	ldr  r1, =_log_f
	ldrb r0, [r1, r0]
	orrs  r_af, r0
	pop  {pc}

ope79:
	adds  r_t, #4
	mov  r0, r_bc
	adds  r0, #1
	uxth r0, r0
	mov  r_memptr, r0
	mov  r0, r_af
	lsrs  r0, #8
	mov  r1, r_bc
	ldr  r2, =iowrite8
	bx   r2

ope7a:
	mov  r0, r_hl
	adds  r0, #1
	uxth r0, r0
	mov  r_memptr, r0
	mov  r0, r_sp
	push {lr}
	bl   adc16
	adds  r_t, #7
	pop  {pc}

ope7b:
	mov  r0, r_pc
	push {lr}
	bl   read16inc
	mov  r_pc, r1
	mov  r_temp, r0
	adds  r0, r_temp, #1
	uxth r0, r0
	mov  r_memptr, r0
	mov  r0, r_temp
	bl   read16
	mov  r_sp, r0
	adds  r_t, #12
	pop  {pc}

ope7c:
	ldr  r2, =neg8
	bx   r2

ope7d:
	ldr  r0, =z80a_resting_state
	ldrb r0, [r0, #10] // iff2
	ldr  r1, =z80a_resting_state
	strb r0, [r1, #9] // iff1
	mov  r0, r_sp
	push {lr}
	bl   read16inc
	mov  r_sp, r1
	mov  r_temp, r0
	mov  r_pc, r_temp
	mov  r_memptr, r_temp
	adds  r_t, #6
	pop  {pc}

ope7e:
	movs  r0, #2
	ldr  r1, =z80a_resting_state
	str  r0, [r1, #0] // im
	bx   lr

ope7f:
	bx   lr

.ltorg
opea0:
	push {lr}
	bl   ldX_common
	mov  r0, r_hl
	adds  r0, #1
	uxth r0, r0
	mov  r_hl, r0
	mov  r0, r_de
	adds  r0, #1
	uxth r0, r0
	mov  r_de, r0
	pop  {pc}

.ltorg
opea1:
	push {lr}
	bl   cpX_common
	mov  r0, r_hl
	adds  r0, #1
	uxth r0, r0
	mov  r_hl, r0
	pop  {pc}

opea2:
	mov  r0, r_bc
	adds  r0, #1
	uxth r0, r0
	mov  r_memptr, r0
	adds  r_t, #8
	mov  r0, r_bc
	push {lr}
	bl   ioread8
	mov  r_temp, r0		// fine to overwrite hi in r_temp
	movs  r1, #1
	lsls  r1, #8
	mov  r0, r_bc
	subs  r0, r1
	uxth r0, r0
	mov  r_bc, r0
	mov  r0, r_temp		// high half of word is ignored later
	mov  r1, r_hl
	bl   write8
	mov  r0, r_hl
	adds  r0, #1
	uxth r0, r0
	mov  r_hl, r0
	mov  r0, r_bc		// high half of word is ignored later
	add  r0, r_temp
	adds  r0, #1
	// a2a3aaabflags r_temp, r0
	lsrs  r_af, #8
	lsls  r_af, #8
	mov  r2, r_bc
	lsrs  r2, #8
	ldr  r1, =_log_f
	ldrb r2, [r1, r2]
	movs  r1, #PV
	bics  r2, r1
	orrs  r_af, r2
	uxtb r0, r0
	cmp  r0, r_temp
	bge  1f
	adds  r_af, #HF|CF
1:
	lsrs  r1, r_temp, #8
	bcc  1f
	adds  r_af, #NF
1:
	lsls  r1, r0, #29
	lsrs  r1, #21
	mov  r2, r_bc
	eors  r1, r2
	lsrs  r1, #8
	ldr  r0, =_log_f
	ldrb r0, [r0, r1]
	movs  r1, #PV
	ands  r0, r1
	orrs  r_af, r0
	pop  {pc}

opea3:
	adds  r_t, #8
	mov  r0, r_hl
	push {lr}
	bl   read8inc
	mov  r_hl, r1
	mov  r_temp, r0		// fine to overwrite hi in r_temp
	movs  r1, #1
	lsls  r1, #8
	mov  r0, r_bc
	subs  r0, r1
	uxth r0, r0
	mov  r_bc, r0
	mov  r0, r_temp		// high half of word is ignored later
	mov  r1, r_bc
	bl   iowrite8
	mov  r0, r_hl		// high half of word is ignored later
	add  r0, r_temp
	// a2a3aaabflags r_temp, r0
	lsrs  r_af, #8
	lsls  r_af, #8
	mov  r2, r_bc
	lsrs  r2, #8
	ldr  r1, =_log_f
	ldrb r2, [r1, r2]
	movs  r1, #PV
	bics  r2, r1
	orrs  r_af, r2
	uxtb r0, r0
	cmp  r0, r_temp
	bge  1f
	adds  r_af, #HF|CF
1:
	lsrs  r1, r_temp, #8
	bcc  1f
	adds  r_af, #NF
1:
	lsls  r1, r0, #29
	lsrs  r1, #21
	mov  r2, r_bc
	eors  r1, r2
	lsrs  r1, #8
	ldr  r0, =_log_f
	ldrb r0, [r0, r1]
	movs  r1, #PV
	ands  r0, r1
	orrs  r_af, r0
	mov  r0, r_bc
	adds  r0, #1
	uxth r0, r0
	mov  r_memptr, r0
	pop  {pc}

opea8:
	push {lr}
	bl   ldX_common
	mov  r0, r_hl
	subs  r0, #1
	uxth r0, r0
	mov  r_hl, r0
	mov  r0, r_de
	subs  r0, #1
	uxth r0, r0
	mov  r_de, r0
	pop  {pc}

opea9:
	push {lr}
	bl   cpX_common
	mov  r0, r_hl
	subs  r0, #1
	uxth r0, r0
	mov  r_hl, r0
	pop  {pc}

opeaa:
	mov  r0, r_bc
	subs  r0, #1
	uxth r0, r0
	mov  r_memptr, r0
	adds  r_t, #8
	mov  r0, r_bc
	push {lr}
	bl   ioread8
	mov  r_temp, r0		// fine to overwrite hi in r_temp
	movs  r1, #1
	lsls  r1, #8
	mov  r0, r_bc
	subs  r0, r1
	uxth r0, r0
	mov  r_bc, r0
	mov  r0, r_temp		// high half of word is ignored later
	mov  r1, r_hl
	bl   write8
	mov  r0, r_hl
	subs  r0, #1
	uxth r0, r0
	mov  r_hl, r0
	mov  r0, r_bc		// high half of word is ignored later
	add  r0, r_temp
	subs  r0, #1
	// a2a3aaabflags r_temp, r0
	lsrs  r_af, #8
	lsls  r_af, #8
	mov  r2, r_bc
	lsrs  r2, #8
	ldr  r1, =_log_f
	ldrb r2, [r1, r2]
	movs  r1, #PV
	bics  r2, r1
	orrs  r_af, r2
	uxtb r0, r0
	cmp  r0, r_temp
	bge  1f
	adds  r_af, #HF|CF
1:
	lsrs  r1, r_temp, #8
	bcc  1f
	adds  r_af, #NF
1:
	lsls  r1, r0, #29
	lsrs  r1, #21
	mov  r2, r_bc
	eors  r1, r2
	lsrs  r1, #8
	ldr  r0, =_log_f
	ldrb r0, [r0, r1]
	movs  r1, #PV
	ands  r0, r1
	orrs  r_af, r0
	pop  {pc}

opeab:
	adds  r_t, #8
	mov  r0, r_hl
	read8_internal r0
	mov  r_temp, r0		// fine to overwrite hi in r_temp
	mov  r0, r_hl
	subs  r0, #1
	uxth r0, r0
	mov  r_hl, r0
	movs  r1, #1
	lsls  r1, #8
	mov  r0, r_bc
	subs  r0, r1
	uxth r0, r0
	mov  r_bc, r0
	mov  r0, r_temp		// high half of word is ignored later
	mov  r1, r_bc
	push {lr}
	bl   iowrite8
	mov  r0, r_hl		// high half of word is ignored later
	add  r0, r_temp
	// a2a3aaabflags r_temp, r0
	lsrs  r_af, #8
	lsls  r_af, #8
	mov  r2, r_bc
	lsrs  r2, #8
	ldr  r1, =_log_f
	ldrb r2, [r1, r2]
	movs  r1, #PV
	bics  r2, r1
	orrs  r_af, r2
	uxtb r0, r0
	cmp  r0, r_temp
	bge  1f
	adds  r_af, #HF|CF
1:
	lsrs  r1, r_temp, #8
	bcc  1f
	adds  r_af, #NF
1:
	lsls  r1, r0, #29
	lsrs  r1, #21
	mov  r2, r_bc
	eors  r1, r2
	lsrs  r1, #8
	ldr  r0, =_log_f
	ldrb r0, [r0, r1]
	movs  r1, #PV
	ands  r0, r1
	orrs  r_af, r0
	mov  r0, r_bc
	subs  r0, #1
	uxth r0, r0
	mov  r_memptr, r0
	pop  {pc}

ldX_common:
	adds  r_t, #8
	mov  r0, r_hl
	read8_internal r0
	mov  r_temp, r0		// fine to overwrite hi in r_temp
	mov  r0, r_temp		// high half of word is ignored later
	mov  r1, r_de
	push {lr}
	bl   write8
	preserve_only_flags r1, (CF|SF|ZF)
	lsrs  r0, r_af, #8
	add  r_temp, r0
	bl   set_af35_special_r_temp
	mov  r0, r_bc
	subs  r0, #1
	uxth r0, r0
	mov  r_bc, r0
	beq  6f
	adds  r_af, #PV
6:
	pop  {pc}

cpX_common:
	push {lr}
	adds  r_t, #8
	push {r_af}
	mov  r0, r_hl
	read8_internal r0
	mov  r_temp, r0
	bl   cp8
	lsrs  r0, r_af, #8
	subs  r0, r_temp
	lsrs  r1, r_af, #HF_INDEX+1
bcc 6f
	subs  r0, #1
6:
	mov  r_temp, r0
	preserve_only_flags r1, (SF|HF|NF|ZF)
	bl   set_af35_special_r_temp
	pop  {r0}
	movs  r1, #CF
	ands  r0, r1
	orrs  r_af, r0
	mov  r0, r_bc
	subs  r0, #1
	uxth r0, r0
	mov  r_bc, r0
	beq  6f
	adds  r_af, #PV
6:
	mov  r0, r_memptr
	adds  r0, #1
	uxth r0, r0
	mov  r_memptr, r0
	pop  {pc}

opeb0:
	push {lr}
	bl   ldX_common
	mov  r0, r_hl
	adds  r0, #1
	uxth r0, r0
	mov  r_hl, r0
	mov  r0, r_de
	adds  r0, #1
	uxth r0, r0
	mov  r_de, r0
	lsrs  r0, r_af, #3
	bcc  2f
	subs  r_pc, #2
	uxth r_pc, r_pc
	adds  r_t, #5
	adds  r0, r_pc, #1
	uxth r0, r0
	mov  r_memptr, r0
2:
	pop  {pc}

.ltorg
opeb1:
	push {lr}
	bl   cpX_common
	mov  r0, r_hl
	adds  r0, #1
	uxth r0, r0
	mov  r_hl, r0
	lsrs  r0, r_af, #3
	bcc  2f
	lsrs  r0, r_af, #7
	bcs  3f
	subs  r_pc, #2
	uxth r_pc, r_pc
	adds  r_t, #5
	adds  r0, r_pc, #1
	uxth r0, r0
	mov  r_memptr, r0
3:
2:
	pop  {pc}

opeb2:
	adds  r_t, #8
	mov  r0, r_bc
	adds  r0, #1
	uxth r0, r0
	mov  r_memptr, r0
	mov  r0, r_bc
	push {lr}
	bl   ioread8
	mov  r1, r_hl
	bl   write8
	mov  r0, r_hl
	adds  r0, #1
	uxth r0, r0
	mov  r_hl, r0
	mov  r0, r_bc
	lsrs  r0, #8
	bl   dec8
	lsls  r0, #8
	mov  r1, r_bc
	uxtb r1, r1
	orrs  r0, r1
	mov  r_bc, r0
	mov  r0, r_bc
	lsrs  r0, #8
	cmp  r0, #0
	beq  1f
	movs  r0, #4
	orrs  r_af, r0
	subs  r_pc, #2
	uxth r_pc, r_pc
	adds  r_t, #5
	pop  {pc}

1:
	movs  r0, #4
	bics  r_af, r0
	pop  {pc}

opeb3:
	adds  r_t, #8
	mov  r0, r_bc
	lsrs  r0, #8
	push {lr}
	bl   dec8
	lsls  r0, #8
	mov  r1, r_bc
	uxtb r1, r1
	orrs  r0, r1
	mov  r_bc, r0
	mov  r0, r_hl
	read8_internal r0
	mov  r1, r_bc
	bl   iowrite8
	mov  r0, r_hl
	adds  r0, #1
	uxth r0, r0
	mov  r_hl, r0
	mov  r0, r_bc
	adds  r0, #1
	uxth r0, r0
	mov  r_memptr, r0
	mov  r0, r_bc
	lsrs  r0, #8
	cmp  r0, #0
	beq  1f
	movs  r0, #4
	orrs  r_af, r0
	subs  r_pc, #2
	uxth r_pc, r_pc
	adds  r_t, #5
	movs  r0, #1
	bics  r_af, r0
	mov  r0, r_hl
	uxtb r0, r0
	cmp  r0, #0
	bne  1f
	movs  r0, #1
	orrs  r_af, r0
1:
	pop  {pc}

1:
	movs  r0, #4
	bics  r_af, r0
	mov  r0, r_hl
	uxtb r0, r0
	cmp  r0, #0
	bne  1f
	movs  r0, #1
	orrs  r_af, r0
1:
	pop  {pc}

opeb8:
	push {lr}
	bl   ldX_common
	mov  r0, r_hl
	subs  r0, #1
	uxth r0, r0
	mov  r_hl, r0
	mov  r0, r_de
	subs  r0, #1
	uxth r0, r0
	mov  r_de, r0
	lsrs  r0, r_af, #3
	bcc  2f
	subs  r_pc, #2
	uxth r_pc, r_pc
	adds  r_t, #5
	adds  r0, r_pc, #1
	uxth r0, r0
	mov  r_memptr, r0
2:
	pop  {pc}

opeb9:
	push {lr}
	bl   cpX_common
	mov  r0, r_hl
	subs  r0, #1
	uxth r0, r0
	mov  r_hl, r0
	lsrs  r0, r_af, #3
	bcc  2f
	lsrs  r0, r_af, #7
	bcs  3f
	subs  r_pc, #2
	uxth r_pc, r_pc
	adds  r_t, #5
	adds  r0, r_pc, #1
	uxth r0, r0
	mov  r_memptr, r0
3:
2:
	pop  {pc}

opeba:
	adds  r_t, #8
	mov  r0, r_bc
	subs  r0, #1
	uxth r0, r0
	mov  r_memptr, r0
	mov  r0, r_bc
	push {lr}
	bl   ioread8
	mov  r1, r_hl
	bl   write8
	mov  r0, r_hl
	subs  r0, #1
	uxth r0, r0
	mov  r_hl, r0
	mov  r0, r_bc
	lsrs  r0, #8
	bl   dec8
	lsls  r0, #8
	mov  r1, r_bc
	uxtb r1, r1
	orrs  r0, r1
	mov  r_bc, r0
	mov  r0, r_bc
	lsrs  r0, #8
	cmp  r0, #0
	beq  1f
	movs  r0, #4
	orrs  r_af, r0
	subs  r_pc, #2
	uxth r_pc, r_pc
	adds  r_t, #5
	pop  {pc}

1:
	movs  r0, #4
	bics  r_af, r0
	pop  {pc}

opebb:
	adds  r_t, #8
	mov  r0, r_bc
	lsrs  r0, #8
	push {lr}
	bl   dec8
	lsls  r0, #8
	mov  r1, r_bc
	uxtb r1, r1
	orrs  r0, r1
	mov  r_bc, r0
	mov  r0, r_hl
	read8_internal r0
	mov  r1, r_bc
	bl   iowrite8
	mov  r0, r_hl
	subs  r0, #1
	uxth r0, r0
	mov  r_hl, r0
	mov  r0, r_bc
	subs  r0, #1
	uxth r0, r0
	mov  r_memptr, r0
	mov  r0, r_bc
	lsrs  r0, #8
	cmp  r0, #0
	beq  1f
	movs  r0, #4
	orrs  r_af, r0
	subs  r_pc, #2
	uxth r_pc, r_pc
	adds  r_t, #5
	movs  r0, #1
	bics  r_af, r0
	mov  r0, r_hl
	uxtb r0, r0
	cmp  r0, #255
	bne  1f
	movs  r0, #1
	orrs  r_af, r0
1:
	pop  {pc}

1:
	movs  r0, #4
	bics  r_af, r0
	mov  r0, r_hl
	uxtb r0, r0
	cmp  r0, #255
	bne  1f
	movs  r0, #1
	orrs  r_af, r0
1:
	pop  {pc}

.ltorg
.ltorg
.ltorg
// === END ed prefix
